
=== state S_0 =====================================
---------------
!!! invariant '_inv_4' cannot be verified in S_0:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:

---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_0:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:

---------------

--- S_0 summary:
'_inv_1': met on 1 paths / definitely violated on 0 paths / cannot be verified on 0 paths
'_inv_2': met on 1 paths / definitely violated on 0 paths / cannot be verified on 0 paths
'_inv_3': met on 1 paths / definitely violated on 0 paths / cannot be verified on 0 paths
'_inv_4': met on 0 paths / definitely violated on 0 paths / cannot be verified on 1 paths
'_inv_5': met on 0 paths / definitely violated on 0 paths / cannot be verified on 1 paths

=== state S_1 =====================================
---------------
!!! invariant '_inv_4' cannot be verified in S_1:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_1:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_1:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_1:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_1:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_1:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_1:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_1:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_1:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_1:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_1:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_1:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_1:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_1:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

--- S_1 summary:
'_inv_1': met on 7 paths / definitely violated on 0 paths / cannot be verified on 0 paths
'_inv_2': met on 7 paths / definitely violated on 0 paths / cannot be verified on 0 paths
'_inv_3': met on 7 paths / definitely violated on 0 paths / cannot be verified on 0 paths
'_inv_4': met on 0 paths / definitely violated on 0 paths / cannot be verified on 7 paths
'_inv_5': met on 0 paths / definitely violated on 0 paths / cannot be verified on 7 paths

=== state S_2 =====================================
---------------
!!! invariant '_inv_4' cannot be verified in S_2:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_2:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_2:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_2:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_2:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_2:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_2:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_2:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_2:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_2:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_2:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_2:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_2:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_2:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

--- S_2 summary:
'_inv_1': met on 7 paths / definitely violated on 0 paths / cannot be verified on 0 paths
'_inv_2': met on 7 paths / definitely violated on 0 paths / cannot be verified on 0 paths
'_inv_3': met on 7 paths / definitely violated on 0 paths / cannot be verified on 0 paths
'_inv_4': met on 0 paths / definitely violated on 0 paths / cannot be verified on 7 paths
'_inv_5': met on 0 paths / definitely violated on 0 paths / cannot be verified on 7 paths

=== state S_3 =====================================
---------------
!!! invariant '_inv_4' cannot be verified in S_3:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_3:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_3:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_3:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_3:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_3:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_3:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_3:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_3:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_3:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_3:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_3:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_3:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_3:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

--- S_3 summary:
'_inv_1': met on 7 paths / definitely violated on 0 paths / cannot be verified on 0 paths
'_inv_2': met on 7 paths / definitely violated on 0 paths / cannot be verified on 0 paths
'_inv_3': met on 7 paths / definitely violated on 0 paths / cannot be verified on 0 paths
'_inv_4': met on 0 paths / definitely violated on 0 paths / cannot be verified on 7 paths
'_inv_5': met on 0 paths / definitely violated on 0 paths / cannot be verified on 7 paths

=== state S_4 =====================================
---------------
!!! invariant '_inv_4' cannot be verified in S_4:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_4:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_4:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
---------------

---------------
!!! invariant '_inv_3' violated in S_4:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
not (((balance (state_dao) + random_amount (0)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_4:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
not (((balance (state_dao) + random_amount (0)) <= 20))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_4:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_4:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_4:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_4:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_4:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_4:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_4:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_4:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_4:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_4:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

--- S_4 summary:
'_inv_1': met on 8 paths / definitely violated on 0 paths / cannot be verified on 0 paths
'_inv_2': met on 8 paths / definitely violated on 0 paths / cannot be verified on 0 paths
'_inv_3': met on 7 paths / definitely violated on 1 paths / cannot be verified on 0 paths
'_inv_4': met on 1 paths / definitely violated on 0 paths / cannot be verified on 7 paths
'_inv_5': met on 1 paths / definitely violated on 1 paths / cannot be verified on 6 paths

=== state S_5 =====================================
---------------
!!! invariant '_inv_4' cannot be verified in S_5:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_5:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_5:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
---------------

---------------
!!! invariant '_inv_3' violated in S_5:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
not (((balance (state_dao) + random_amount (0)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_5:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
not (((balance (state_dao) + random_amount (0)) <= 20))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_5:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_5:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_5:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_5:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_5:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_5:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_5:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_5:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_5:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_5:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

--- S_5 summary:
'_inv_1': met on 8 paths / definitely violated on 0 paths / cannot be verified on 0 paths
'_inv_2': met on 8 paths / definitely violated on 0 paths / cannot be verified on 0 paths
'_inv_3': met on 7 paths / definitely violated on 1 paths / cannot be verified on 0 paths
'_inv_4': met on 1 paths / definitely violated on 0 paths / cannot be verified on 7 paths
'_inv_5': met on 1 paths / definitely violated on 1 paths / cannot be verified on 6 paths

=== state S_6 =====================================
---------------
!!! invariant '_inv_4' cannot be verified in S_6:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_6:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_6:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
---------------

---------------
!!! invariant '_inv_3' violated in S_6:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
not (((balance (state_dao) + random_amount (0)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_6:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
not (((balance (state_dao) + random_amount (0)) <= 20))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_6:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_6:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_6:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_6:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_6:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_6:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_6:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_6:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_6:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_6:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

--- S_6 summary:
'_inv_1': met on 8 paths / definitely violated on 0 paths / cannot be verified on 0 paths
'_inv_2': met on 8 paths / definitely violated on 0 paths / cannot be verified on 0 paths
'_inv_3': met on 7 paths / definitely violated on 1 paths / cannot be verified on 0 paths
'_inv_4': met on 1 paths / definitely violated on 0 paths / cannot be verified on 7 paths
'_inv_5': met on 1 paths / definitely violated on 1 paths / cannot be verified on 6 paths

=== state S_7 =====================================
---------------
!!! invariant '_inv_4' cannot be verified in S_7:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_7:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_7:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
---------------

---------------
!!! invariant '_inv_3' violated in S_7:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
not (((balance (state_dao) + random_amount (0)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_7:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
not (((balance (state_dao) + random_amount (0)) <= 20))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_7:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_7:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_7:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_7:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_7:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_7:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_7:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_7:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_7:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_7:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

--- S_7 summary:
'_inv_1': met on 8 paths / definitely violated on 0 paths / cannot be verified on 0 paths
'_inv_2': met on 8 paths / definitely violated on 0 paths / cannot be verified on 0 paths
'_inv_3': met on 7 paths / definitely violated on 1 paths / cannot be verified on 0 paths
'_inv_4': met on 1 paths / definitely violated on 0 paths / cannot be verified on 7 paths
'_inv_5': met on 1 paths / definitely violated on 1 paths / cannot be verified on 6 paths

=== state S_8 =====================================
---------------
!!! invariant '_inv_4' cannot be verified in S_8:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_8:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_8:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
(random_user (7) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_8:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
(random_user (7) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_8:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_8:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_8:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_8:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_8:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_8:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_8:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_8:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_8:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_8:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
not (((random_amount (7) >= 0)
      and (((balance (user) - random_amount (0)) >= random_amount (7))
           and not ((random_amount (7) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_8:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
not (((random_amount (7) >= 0)
      and (((balance (user) - random_amount (0)) >= random_amount (7))
           and not ((random_amount (7) > 0)))))
---------------

---------------
!!! invariant '_inv_3' violated in S_8:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
not (((balance (state_dao) + random_amount (0)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_8:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
not (((balance (state_dao) + random_amount (0)) <= 20))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_8:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_8:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_8:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_8:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_8:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_8:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_8:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_8:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_8:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_8:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

--- S_8 summary:
'_inv_1': met on 14 paths / definitely violated on 0 paths / cannot be verified on 0 paths
'_inv_2': met on 10 paths / definitely violated on 0 paths / cannot be verified on 4 paths
'_inv_3': met on 13 paths / definitely violated on 1 paths / cannot be verified on 0 paths
'_inv_4': met on 1 paths / definitely violated on 0 paths / cannot be verified on 13 paths
'_inv_5': met on 5 paths / definitely violated on 1 paths / cannot be verified on 8 paths

=== state S_9 =====================================
---------------
!!! invariant '_inv_4' cannot be verified in S_9:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_9:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_9:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
(random_user (7) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_9:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
(random_user (7) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_9:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_9:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_9:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_9:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_9:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_9:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_9:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_9:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_9:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_9:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
not (((random_amount (7) >= 0)
      and (((balance (user) - random_amount (0)) >= random_amount (7))
           and not ((random_amount (7) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_9:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
not (((random_amount (7) >= 0)
      and (((balance (user) - random_amount (0)) >= random_amount (7))
           and not ((random_amount (7) > 0)))))
---------------

---------------
!!! invariant '_inv_3' violated in S_9:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
not (((balance (state_dao) + random_amount (0)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_9:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
not (((balance (state_dao) + random_amount (0)) <= 20))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_9:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_9:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_9:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_9:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_9:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_9:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_9:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_9:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_9:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_9:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

--- S_9 summary:
'_inv_1': met on 14 paths / definitely violated on 0 paths / cannot be verified on 0 paths
'_inv_2': met on 10 paths / definitely violated on 0 paths / cannot be verified on 4 paths
'_inv_3': met on 13 paths / definitely violated on 1 paths / cannot be verified on 0 paths
'_inv_4': met on 1 paths / definitely violated on 0 paths / cannot be verified on 13 paths
'_inv_5': met on 5 paths / definitely violated on 1 paths / cannot be verified on 8 paths

=== state S_10 =====================================
---------------
!!! invariant '_inv_4' cannot be verified in S_10:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_10:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_10:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
(random_user (7) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_10:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
(random_user (7) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_10:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_10:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_10:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_10:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_10:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_10:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_10:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_10:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_10:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_10:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
not (((random_amount (7) >= 0)
      and (((balance (user) - random_amount (0)) >= random_amount (7))
           and not ((random_amount (7) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_10:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
not (((random_amount (7) >= 0)
      and (((balance (user) - random_amount (0)) >= random_amount (7))
           and not ((random_amount (7) > 0)))))
---------------

---------------
!!! invariant '_inv_3' violated in S_10:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
not (((balance (state_dao) + random_amount (0)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_10:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
not (((balance (state_dao) + random_amount (0)) <= 20))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_10:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_10:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_10:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_10:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_10:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_10:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_10:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_10:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_10:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_10:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

--- S_10 summary:
'_inv_1': met on 14 paths / definitely violated on 0 paths / cannot be verified on 0 paths
'_inv_2': met on 10 paths / definitely violated on 0 paths / cannot be verified on 4 paths
'_inv_3': met on 13 paths / definitely violated on 1 paths / cannot be verified on 0 paths
'_inv_4': met on 1 paths / definitely violated on 0 paths / cannot be verified on 13 paths
'_inv_5': met on 5 paths / definitely violated on 1 paths / cannot be verified on 8 paths

=== state S_11 =====================================
---------------
!!! invariant '_inv_4' cannot be verified in S_11:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_11:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_11:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
(random_user (7) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_11:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
(random_user (7) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_11:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
---------------

---------------
!!! invariant '_inv_3' violated in S_11:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
not ((((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_11:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
not ((((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_11:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_11:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_11:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_11:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_11:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_11:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_11:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_11:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
not (((0 + random_amount (0)) > 0))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_11:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
not (((random_amount (7) >= 0)
      and (((balance (user) - random_amount (0)) >= random_amount (7))
           and not ((random_amount (7) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_11:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
not (((random_amount (7) >= 0)
      and (((balance (user) - random_amount (0)) >= random_amount (7))
           and not ((random_amount (7) > 0)))))
---------------

---------------
!!! invariant '_inv_3' violated in S_11:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
not (((balance (state_dao) + random_amount (0)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_11:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
not (((balance (state_dao) + random_amount (0)) <= 20))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_11:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_11:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_11:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_11:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_11:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_11:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_11:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_11:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_11:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_11:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

--- S_11 summary:
'_inv_1': met on 16 paths / definitely violated on 0 paths / cannot be verified on 0 paths
'_inv_2': met on 12 paths / definitely violated on 0 paths / cannot be verified on 4 paths
'_inv_3': met on 14 paths / definitely violated on 2 paths / cannot be verified on 0 paths
'_inv_4': met on 2 paths / definitely violated on 0 paths / cannot be verified on 14 paths
'_inv_5': met on 7 paths / definitely violated on 2 paths / cannot be verified on 7 paths

=== state S_12 =====================================
---------------
!!! invariant '_inv_4' cannot be verified in S_12:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_12:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_12:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
(random_user (7) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_12:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
(random_user (7) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_12:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
---------------

---------------
!!! invariant '_inv_3' violated in S_12:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
not ((((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_12:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
not ((((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_12:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_12:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_12:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_12:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_12:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_12:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_12:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_12:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
not (((((0 + random_amount (0)) - 2) >= 0)
      and (((balance (state_dao) + random_amount (0)) + random_amount (7))
           >= ((0 + random_amount (0)) - 2))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_12:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
not (((0 + random_amount (0)) > 0))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_12:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
not (((random_amount (7) >= 0)
      and (((balance (user) - random_amount (0)) >= random_amount (7))
           and not ((random_amount (7) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_12:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
not (((random_amount (7) >= 0)
      and (((balance (user) - random_amount (0)) >= random_amount (7))
           and not ((random_amount (7) > 0)))))
---------------

---------------
!!! invariant '_inv_3' violated in S_12:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
not (((balance (state_dao) + random_amount (0)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_12:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
not (((balance (state_dao) + random_amount (0)) <= 20))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_12:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_12:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_12:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_12:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_12:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_12:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_12:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_12:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_12:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_12:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

--- S_12 summary:
'_inv_1': met on 17 paths / definitely violated on 0 paths / cannot be verified on 0 paths
'_inv_2': met on 13 paths / definitely violated on 0 paths / cannot be verified on 4 paths
'_inv_3': met on 15 paths / definitely violated on 2 paths / cannot be verified on 0 paths
'_inv_4': met on 2 paths / definitely violated on 0 paths / cannot be verified on 15 paths
'_inv_5': met on 8 paths / definitely violated on 2 paths / cannot be verified on 7 paths

=== state S_13 =====================================
---------------
!!! invariant '_inv_4' cannot be verified in S_13:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_13:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_13:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
(random_user (7) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_13:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
(random_user (7) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_13:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
---------------

---------------
!!! invariant '_inv_3' violated in S_13:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
not ((((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_13:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
not ((((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_13:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_13:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_13:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_13:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_13:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_13:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_1' violated in S_13:
(((current_layer = 0) and not (exception)) implies (state = INITIALSTATE))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_13:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_13:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
not (((((0 + random_amount (0)) - 2) >= 0)
      and (((balance (state_dao) + random_amount (0)) + random_amount (7))
           >= ((0 + random_amount (0)) - 2))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_13:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
not (((0 + random_amount (0)) > 0))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_13:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
not (((random_amount (7) >= 0)
      and (((balance (user) - random_amount (0)) >= random_amount (7))
           and not ((random_amount (7) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_13:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
not (((random_amount (7) >= 0)
      and (((balance (user) - random_amount (0)) >= random_amount (7))
           and not ((random_amount (7) > 0)))))
---------------

---------------
!!! invariant '_inv_3' violated in S_13:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
not (((balance (state_dao) + random_amount (0)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_13:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
not (((balance (state_dao) + random_amount (0)) <= 20))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_13:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_13:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_13:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_13:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_13:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_13:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_13:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_13:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_13:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_13:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

--- S_13 summary:
'_inv_1': met on 16 paths / definitely violated on 1 paths / cannot be verified on 0 paths
'_inv_2': met on 13 paths / definitely violated on 0 paths / cannot be verified on 4 paths
'_inv_3': met on 15 paths / definitely violated on 2 paths / cannot be verified on 0 paths
'_inv_4': met on 2 paths / definitely violated on 0 paths / cannot be verified on 15 paths
'_inv_5': met on 8 paths / definitely violated on 2 paths / cannot be verified on 7 paths

=== state S_14 =====================================
---------------
!!! invariant '_inv_4' cannot be verified in S_14:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_14:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_14:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
(random_user (7) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_14:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
(random_user (7) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_14:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
---------------

---------------
!!! invariant '_inv_3' violated in S_14:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
not ((((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_14:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
not ((((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_14:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_14:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_14:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_14:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_14:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_14:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_14:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
(random_user (13) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_14:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_14:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_14:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
not (((random_amount (13) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            + ((0 + random_amount (0)) - 2)) >= random_amount (13))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_14:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
(random_function (13) = none)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_14:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
(random_function (13) = none)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_14:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
(random_function (13) = none)
not (((random_amount (13) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            + ((0 + random_amount (0)) - 2)) >= random_amount (13))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_14:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
not ((random_function (13) = none))
((random_amount (13) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        + ((0 + random_amount (0)) - 2)) >= random_amount (13))
      and not ((random_amount (13) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_14:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
not ((random_function (13) = none))
not (((random_amount (13) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             + ((0 + random_amount (0)) - 2)) >= random_amount (13))
           and not ((random_amount (13) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_14:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
not (((((0 + random_amount (0)) - 2) >= 0)
      and (((balance (state_dao) + random_amount (0)) + random_amount (7))
           >= ((0 + random_amount (0)) - 2))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_14:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
not (((0 + random_amount (0)) > 0))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_14:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
not (((random_amount (7) >= 0)
      and (((balance (user) - random_amount (0)) >= random_amount (7))
           and not ((random_amount (7) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_14:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
not (((random_amount (7) >= 0)
      and (((balance (user) - random_amount (0)) >= random_amount (7))
           and not ((random_amount (7) > 0)))))
---------------

---------------
!!! invariant '_inv_3' violated in S_14:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
not (((balance (state_dao) + random_amount (0)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_14:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
not (((balance (state_dao) + random_amount (0)) <= 20))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_14:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_14:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_14:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_14:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_14:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_14:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_14:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_14:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_14:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_14:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

--- S_14 summary:
'_inv_1': met on 23 paths / definitely violated on 0 paths / cannot be verified on 0 paths
'_inv_2': met on 19 paths / definitely violated on 0 paths / cannot be verified on 4 paths
'_inv_3': met on 21 paths / definitely violated on 2 paths / cannot be verified on 0 paths
'_inv_4': met on 2 paths / definitely violated on 0 paths / cannot be verified on 21 paths
'_inv_5': met on 12 paths / definitely violated on 2 paths / cannot be verified on 9 paths

=== state S_15 =====================================
---------------
!!! invariant '_inv_4' cannot be verified in S_15:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_15:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_15:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
(random_user (7) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_15:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
(random_user (7) = user)
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_15:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
(random_user (14) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_15:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
(random_user (14) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_15:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_15:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_15:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_15:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_15:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_15:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_15:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_15:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_15:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_15:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
not (((random_amount (14) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            >= random_amount (14)) and not ((random_amount (14) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_15:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
not (((random_amount (14) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            >= random_amount (14)) and not ((random_amount (14) > 0)))))
---------------

---------------
!!! invariant '_inv_3' violated in S_15:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
not ((((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_15:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
not ((((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_15:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_15:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_15:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_15:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_15:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_15:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_15:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
(random_user (13) = user)
---------------

---------------
!!! invariant '_inv_3' cannot be verified in S_15:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
         + initial[random_amount, (7)])
        - ((0 + initial[random_amount, (0)]) - 2))
       + initial[random_amount, (13)]) > 20))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_15:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_15:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_15:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
not (((random_amount (13) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            + ((0 + random_amount (0)) - 2)) >= random_amount (13))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_15:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
(random_function (13) = none)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_15:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
(random_function (13) = none)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_15:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
(random_function (13) = none)
not (((random_amount (13) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            + ((0 + random_amount (0)) - 2)) >= random_amount (13))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_15:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
not ((random_function (13) = none))
((random_amount (13) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        + ((0 + random_amount (0)) - 2)) >= random_amount (13))
      and not ((random_amount (13) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_15:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
not ((random_function (13) = none))
not (((random_amount (13) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             + ((0 + random_amount (0)) - 2)) >= random_amount (13))
           and not ((random_amount (13) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_15:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
not (((((0 + random_amount (0)) - 2) >= 0)
      and (((balance (state_dao) + random_amount (0)) + random_amount (7))
           >= ((0 + random_amount (0)) - 2))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_15:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
not (((0 + random_amount (0)) > 0))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_15:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
not (((random_amount (7) >= 0)
      and (((balance (user) - random_amount (0)) >= random_amount (7))
           and not ((random_amount (7) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_15:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
not (((random_amount (7) >= 0)
      and (((balance (user) - random_amount (0)) >= random_amount (7))
           and not ((random_amount (7) > 0)))))
---------------

---------------
!!! invariant '_inv_3' violated in S_15:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
not (((balance (state_dao) + random_amount (0)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_15:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
not (((balance (state_dao) + random_amount (0)) <= 20))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_15:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_15:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_15:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_15:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_15:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_15:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_15:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_15:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_15:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_15:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

--- S_15 summary:
'_inv_1': met on 29 paths / definitely violated on 0 paths / cannot be verified on 0 paths
'_inv_2': met on 21 paths / definitely violated on 0 paths / cannot be verified on 8 paths
'_inv_3': met on 26 paths / definitely violated on 2 paths / cannot be verified on 1 paths
'_inv_4': met on 2 paths / definitely violated on 0 paths / cannot be verified on 27 paths
'_inv_5': met on 16 paths / definitely violated on 2 paths / cannot be verified on 11 paths

=== state S_16 =====================================
---------------
!!! invariant '_inv_4' cannot be verified in S_16:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_16:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_16:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
(random_user (7) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_16:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
(random_user (7) = user)
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_16:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
(random_user (14) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_16:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
(random_user (14) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_16:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_16:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_16:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_16:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_16:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_16:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_16:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_16:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_16:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_16:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
not (((random_amount (14) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            >= random_amount (14)) and not ((random_amount (14) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_16:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
not (((random_amount (14) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            >= random_amount (14)) and not ((random_amount (14) > 0)))))
---------------

---------------
!!! invariant '_inv_3' violated in S_16:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
not ((((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_16:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
not ((((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_16:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_16:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_16:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_16:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_16:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_16:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_16:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
(random_user (13) = user)
---------------

---------------
!!! invariant '_inv_3' cannot be verified in S_16:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
         + initial[random_amount, (7)])
        - ((0 + initial[random_amount, (0)]) - 2))
       + initial[random_amount, (13)]) > 20))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_16:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_16:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_16:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
not (((random_amount (13) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            + ((0 + random_amount (0)) - 2)) >= random_amount (13))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_16:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
(random_function (13) = none)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_16:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
(random_function (13) = none)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_16:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
(random_function (13) = none)
not (((random_amount (13) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            + ((0 + random_amount (0)) - 2)) >= random_amount (13))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_16:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
not ((random_function (13) = none))
((random_amount (13) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        + ((0 + random_amount (0)) - 2)) >= random_amount (13))
      and not ((random_amount (13) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_16:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
not ((random_function (13) = none))
not (((random_amount (13) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             + ((0 + random_amount (0)) - 2)) >= random_amount (13))
           and not ((random_amount (13) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_16:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
not (((((0 + random_amount (0)) - 2) >= 0)
      and (((balance (state_dao) + random_amount (0)) + random_amount (7))
           >= ((0 + random_amount (0)) - 2))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_16:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
not (((0 + random_amount (0)) > 0))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_16:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
not (((random_amount (7) >= 0)
      and (((balance (user) - random_amount (0)) >= random_amount (7))
           and not ((random_amount (7) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_16:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
not (((random_amount (7) >= 0)
      and (((balance (user) - random_amount (0)) >= random_amount (7))
           and not ((random_amount (7) > 0)))))
---------------

---------------
!!! invariant '_inv_3' violated in S_16:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
not (((balance (state_dao) + random_amount (0)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_16:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
not (((balance (state_dao) + random_amount (0)) <= 20))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_16:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_16:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_16:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_16:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_16:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_16:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_16:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_16:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_16:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_16:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

--- S_16 summary:
'_inv_1': met on 29 paths / definitely violated on 0 paths / cannot be verified on 0 paths
'_inv_2': met on 21 paths / definitely violated on 0 paths / cannot be verified on 8 paths
'_inv_3': met on 26 paths / definitely violated on 2 paths / cannot be verified on 1 paths
'_inv_4': met on 2 paths / definitely violated on 0 paths / cannot be verified on 27 paths
'_inv_5': met on 16 paths / definitely violated on 2 paths / cannot be verified on 11 paths

=== state S_17 =====================================
---------------
!!! invariant '_inv_4' cannot be verified in S_17:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_17:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_17:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
(random_user (7) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_17:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
(random_user (7) = user)
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_17:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
(random_user (14) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_17:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
(random_user (14) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_17:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_17:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_17:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_17:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_17:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_17:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_17:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_17:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_17:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_17:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
not (((random_amount (14) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            >= random_amount (14)) and not ((random_amount (14) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_17:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
not (((random_amount (14) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            >= random_amount (14)) and not ((random_amount (14) > 0)))))
---------------

---------------
!!! invariant '_inv_3' violated in S_17:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
not ((((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_17:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
not ((((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_17:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_17:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_17:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_17:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_17:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_17:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_17:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
(random_user (13) = user)
---------------

---------------
!!! invariant '_inv_3' cannot be verified in S_17:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
         + initial[random_amount, (7)])
        - ((0 + initial[random_amount, (0)]) - 2))
       + initial[random_amount, (13)]) > 20))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_17:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_17:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_17:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
not (((random_amount (13) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            + ((0 + random_amount (0)) - 2)) >= random_amount (13))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_17:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
(random_function (13) = none)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_17:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
(random_function (13) = none)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_17:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
(random_function (13) = none)
not (((random_amount (13) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            + ((0 + random_amount (0)) - 2)) >= random_amount (13))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_17:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
not ((random_function (13) = none))
((random_amount (13) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        + ((0 + random_amount (0)) - 2)) >= random_amount (13))
      and not ((random_amount (13) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_17:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
not ((random_function (13) = none))
not (((random_amount (13) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             + ((0 + random_amount (0)) - 2)) >= random_amount (13))
           and not ((random_amount (13) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_17:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
not (((((0 + random_amount (0)) - 2) >= 0)
      and (((balance (state_dao) + random_amount (0)) + random_amount (7))
           >= ((0 + random_amount (0)) - 2))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_17:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
not (((0 + random_amount (0)) > 0))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_17:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
not (((random_amount (7) >= 0)
      and (((balance (user) - random_amount (0)) >= random_amount (7))
           and not ((random_amount (7) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_17:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
not (((random_amount (7) >= 0)
      and (((balance (user) - random_amount (0)) >= random_amount (7))
           and not ((random_amount (7) > 0)))))
---------------

---------------
!!! invariant '_inv_3' violated in S_17:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
not (((balance (state_dao) + random_amount (0)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_17:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
not (((balance (state_dao) + random_amount (0)) <= 20))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_17:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_17:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_17:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_17:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_17:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_17:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_17:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_17:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_17:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_17:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

--- S_17 summary:
'_inv_1': met on 29 paths / definitely violated on 0 paths / cannot be verified on 0 paths
'_inv_2': met on 21 paths / definitely violated on 0 paths / cannot be verified on 8 paths
'_inv_3': met on 26 paths / definitely violated on 2 paths / cannot be verified on 1 paths
'_inv_4': met on 2 paths / definitely violated on 0 paths / cannot be verified on 27 paths
'_inv_5': met on 16 paths / definitely violated on 2 paths / cannot be verified on 11 paths

=== state S_18 =====================================
---------------
!!! invariant '_inv_4' cannot be verified in S_18:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_18:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_18:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
(random_user (7) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_18:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
(random_user (7) = user)
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_18:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
(random_user (14) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_18:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
(random_user (14) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_18:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
---------------

---------------
!!! invariant '_inv_3' violated in S_18:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
not (((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_18:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
not (((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14)) <= 20))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_18:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_18:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_18:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_18:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_18:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_18:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_18:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_18:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
not ((((0 + random_amount (0)) + random_amount (7)) > 0))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_18:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
not (((random_amount (14) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            >= random_amount (14)) and not ((random_amount (14) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_18:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
not (((random_amount (14) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            >= random_amount (14)) and not ((random_amount (14) > 0)))))
---------------

---------------
!!! invariant '_inv_3' violated in S_18:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
not ((((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_18:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
not ((((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_18:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_18:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_18:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_18:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_18:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_18:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_18:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
(random_user (13) = user)
---------------

---------------
!!! invariant '_inv_3' cannot be verified in S_18:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
         + initial[random_amount, (7)])
        - ((0 + initial[random_amount, (0)]) - 2))
       + initial[random_amount, (13)]) > 20))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_18:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_18:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_18:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
not (((random_amount (13) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            + ((0 + random_amount (0)) - 2)) >= random_amount (13))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_18:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
(random_function (13) = none)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_18:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
(random_function (13) = none)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_18:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
(random_function (13) = none)
not (((random_amount (13) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            + ((0 + random_amount (0)) - 2)) >= random_amount (13))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_18:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
not ((random_function (13) = none))
((random_amount (13) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        + ((0 + random_amount (0)) - 2)) >= random_amount (13))
      and not ((random_amount (13) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_18:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
not ((random_function (13) = none))
not (((random_amount (13) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             + ((0 + random_amount (0)) - 2)) >= random_amount (13))
           and not ((random_amount (13) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_18:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
not (((((0 + random_amount (0)) - 2) >= 0)
      and (((balance (state_dao) + random_amount (0)) + random_amount (7))
           >= ((0 + random_amount (0)) - 2))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_18:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
not (((0 + random_amount (0)) > 0))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_18:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
not (((random_amount (7) >= 0)
      and (((balance (user) - random_amount (0)) >= random_amount (7))
           and not ((random_amount (7) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_18:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
not (((random_amount (7) >= 0)
      and (((balance (user) - random_amount (0)) >= random_amount (7))
           and not ((random_amount (7) > 0)))))
---------------

---------------
!!! invariant '_inv_3' violated in S_18:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
not (((balance (state_dao) + random_amount (0)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_18:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
not (((balance (state_dao) + random_amount (0)) <= 20))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_18:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_18:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_18:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_18:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_18:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_18:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_18:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_18:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_18:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_18:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

--- S_18 summary:
'_inv_1': met on 31 paths / definitely violated on 0 paths / cannot be verified on 0 paths
'_inv_2': met on 23 paths / definitely violated on 0 paths / cannot be verified on 8 paths
'_inv_3': met on 27 paths / definitely violated on 3 paths / cannot be verified on 1 paths
'_inv_4': met on 3 paths / definitely violated on 0 paths / cannot be verified on 28 paths
'_inv_5': met on 18 paths / definitely violated on 3 paths / cannot be verified on 10 paths

=== state S_19 =====================================
---------------
!!! invariant '_inv_4' cannot be verified in S_19:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_19:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_19:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
(random_user (7) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_19:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
(random_user (7) = user)
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_19:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
(random_user (14) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_19:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
(random_user (14) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_19:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
---------------

---------------
!!! invariant '_inv_3' violated in S_19:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
not (((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_19:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
not (((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14)) <= 20))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_19:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_19:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_19:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_19:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_19:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_19:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_19:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_19:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
not ((((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
      and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
            + random_amount (14))
           >= (((0 + random_amount (0)) + random_amount (7)) - 2))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_19:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
not ((((0 + random_amount (0)) + random_amount (7)) > 0))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_19:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
not (((random_amount (14) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            >= random_amount (14)) and not ((random_amount (14) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_19:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
not (((random_amount (14) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            >= random_amount (14)) and not ((random_amount (14) > 0)))))
---------------

---------------
!!! invariant '_inv_3' violated in S_19:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
not ((((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_19:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
not ((((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_19:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_19:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_19:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_19:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_19:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_19:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_19:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
(random_user (13) = user)
---------------

---------------
!!! invariant '_inv_3' cannot be verified in S_19:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
         + initial[random_amount, (7)])
        - ((0 + initial[random_amount, (0)]) - 2))
       + initial[random_amount, (13)]) > 20))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_19:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_19:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_19:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
not (((random_amount (13) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            + ((0 + random_amount (0)) - 2)) >= random_amount (13))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_19:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
(random_function (13) = none)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_19:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
(random_function (13) = none)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_19:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
(random_function (13) = none)
not (((random_amount (13) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            + ((0 + random_amount (0)) - 2)) >= random_amount (13))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_19:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
not ((random_function (13) = none))
((random_amount (13) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        + ((0 + random_amount (0)) - 2)) >= random_amount (13))
      and not ((random_amount (13) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_19:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
not ((random_function (13) = none))
not (((random_amount (13) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             + ((0 + random_amount (0)) - 2)) >= random_amount (13))
           and not ((random_amount (13) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_19:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
not (((((0 + random_amount (0)) - 2) >= 0)
      and (((balance (state_dao) + random_amount (0)) + random_amount (7))
           >= ((0 + random_amount (0)) - 2))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_19:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
not (((0 + random_amount (0)) > 0))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_19:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
not (((random_amount (7) >= 0)
      and (((balance (user) - random_amount (0)) >= random_amount (7))
           and not ((random_amount (7) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_19:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
not (((random_amount (7) >= 0)
      and (((balance (user) - random_amount (0)) >= random_amount (7))
           and not ((random_amount (7) > 0)))))
---------------

---------------
!!! invariant '_inv_3' violated in S_19:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
not (((balance (state_dao) + random_amount (0)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_19:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
not (((balance (state_dao) + random_amount (0)) <= 20))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_19:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_19:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_19:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_19:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_19:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_19:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_19:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_19:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_19:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_19:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

--- S_19 summary:
'_inv_1': met on 32 paths / definitely violated on 0 paths / cannot be verified on 0 paths
'_inv_2': met on 24 paths / definitely violated on 0 paths / cannot be verified on 8 paths
'_inv_3': met on 28 paths / definitely violated on 3 paths / cannot be verified on 1 paths
'_inv_4': met on 3 paths / definitely violated on 0 paths / cannot be verified on 29 paths
'_inv_5': met on 19 paths / definitely violated on 3 paths / cannot be verified on 10 paths

=== state S_20 =====================================
---------------
!!! invariant '_inv_4' cannot be verified in S_20:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_20:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_20:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
(random_user (7) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_20:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
(random_user (7) = user)
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_20:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
(random_user (14) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_20:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
(random_user (14) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_20:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
---------------

---------------
!!! invariant '_inv_3' violated in S_20:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
not (((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_20:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
not (((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14)) <= 20))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_20:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_20:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_20:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_20:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_20:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_20:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_1' violated in S_20:
(((current_layer = 0) and not (exception)) implies (state = INITIALSTATE))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_20:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_20:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
not ((((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
      and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
            + random_amount (14))
           >= (((0 + random_amount (0)) + random_amount (7)) - 2))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_20:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
not ((((0 + random_amount (0)) + random_amount (7)) > 0))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_20:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
not (((random_amount (14) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            >= random_amount (14)) and not ((random_amount (14) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_20:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
not (((random_amount (14) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            >= random_amount (14)) and not ((random_amount (14) > 0)))))
---------------

---------------
!!! invariant '_inv_3' violated in S_20:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
not ((((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_20:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
not ((((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_20:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_20:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_20:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_20:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_20:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_20:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_20:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
(random_user (13) = user)
---------------

---------------
!!! invariant '_inv_3' cannot be verified in S_20:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
         + initial[random_amount, (7)])
        - ((0 + initial[random_amount, (0)]) - 2))
       + initial[random_amount, (13)]) > 20))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_20:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_20:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_20:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
not (((random_amount (13) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            + ((0 + random_amount (0)) - 2)) >= random_amount (13))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_20:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
(random_function (13) = none)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_20:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
(random_function (13) = none)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_20:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
(random_function (13) = none)
not (((random_amount (13) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            + ((0 + random_amount (0)) - 2)) >= random_amount (13))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_20:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
not ((random_function (13) = none))
((random_amount (13) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        + ((0 + random_amount (0)) - 2)) >= random_amount (13))
      and not ((random_amount (13) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_20:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
not ((random_function (13) = none))
not (((random_amount (13) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             + ((0 + random_amount (0)) - 2)) >= random_amount (13))
           and not ((random_amount (13) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_20:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
not (((((0 + random_amount (0)) - 2) >= 0)
      and (((balance (state_dao) + random_amount (0)) + random_amount (7))
           >= ((0 + random_amount (0)) - 2))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_20:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
not (((0 + random_amount (0)) > 0))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_20:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
not (((random_amount (7) >= 0)
      and (((balance (user) - random_amount (0)) >= random_amount (7))
           and not ((random_amount (7) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_20:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
not (((random_amount (7) >= 0)
      and (((balance (user) - random_amount (0)) >= random_amount (7))
           and not ((random_amount (7) > 0)))))
---------------

---------------
!!! invariant '_inv_3' violated in S_20:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
not (((balance (state_dao) + random_amount (0)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_20:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
not (((balance (state_dao) + random_amount (0)) <= 20))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_20:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_20:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_20:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_20:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_20:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_20:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_20:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_20:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_20:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_20:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

--- S_20 summary:
'_inv_1': met on 31 paths / definitely violated on 1 paths / cannot be verified on 0 paths
'_inv_2': met on 24 paths / definitely violated on 0 paths / cannot be verified on 8 paths
'_inv_3': met on 28 paths / definitely violated on 3 paths / cannot be verified on 1 paths
'_inv_4': met on 3 paths / definitely violated on 0 paths / cannot be verified on 29 paths
'_inv_5': met on 19 paths / definitely violated on 3 paths / cannot be verified on 10 paths

=== state S_21 =====================================
---------------
!!! invariant '_inv_4' cannot be verified in S_21:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_21:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_21:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
(random_user (7) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_21:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
(random_user (7) = user)
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_21:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
(random_user (14) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_21:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
(random_user (14) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_21:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
---------------

---------------
!!! invariant '_inv_3' violated in S_21:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
not (((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_21:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
not (((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14)) <= 20))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_21:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_21:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_21:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_21:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_21:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_21:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_21:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
(random_user (20) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_21:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
  + initial[random_amount, (20)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
(random_function (20) = deposit)
((random_amount (20) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14))
       + (((0 + random_amount (0)) + random_amount (7)) - 2))
      >= random_amount (20)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_21:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
  + initial[random_amount, (20)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
(random_function (20) = deposit)
((random_amount (20) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14))
       + (((0 + random_amount (0)) + random_amount (7)) - 2))
      >= random_amount (20)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_21:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
(random_function (20) = deposit)
not (((random_amount (20) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             - random_amount (14))
            + (((0 + random_amount (0)) + random_amount (7)) - 2))
           >= random_amount (20))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_21:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
  + initial[random_amount, (20)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
not ((random_function (20) = deposit))
(random_function (20) = none)
((random_amount (20) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14))
       + (((0 + random_amount (0)) + random_amount (7)) - 2))
      >= random_amount (20)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_21:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
  + initial[random_amount, (20)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
not ((random_function (20) = deposit))
(random_function (20) = none)
((random_amount (20) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14))
       + (((0 + random_amount (0)) + random_amount (7)) - 2))
      >= random_amount (20)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_21:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
not ((random_function (20) = deposit))
(random_function (20) = none)
not (((random_amount (20) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             - random_amount (14))
            + (((0 + random_amount (0)) + random_amount (7)) - 2))
           >= random_amount (20))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_21:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
  + initial[random_amount, (20)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
not ((random_function (20) = deposit))
not ((random_function (20) = none))
((random_amount (20) >= 0)
 and ((((((balance (user) - random_amount (0)) - random_amount (7))
         - random_amount (14))
        + (((0 + random_amount (0)) + random_amount (7)) - 2))
       >= random_amount (20)) and not ((random_amount (20) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_21:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
not ((random_function (20) = deposit))
not ((random_function (20) = none))
not (((random_amount (20) >= 0)
      and ((((((balance (user) - random_amount (0)) - random_amount (7))
              - random_amount (14))
             + (((0 + random_amount (0)) + random_amount (7)) - 2))
            >= random_amount (20)) and not ((random_amount (20) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_21:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
not ((((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
      and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
            + random_amount (14))
           >= (((0 + random_amount (0)) + random_amount (7)) - 2))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_21:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
not ((((0 + random_amount (0)) + random_amount (7)) > 0))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_21:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
not (((random_amount (14) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            >= random_amount (14)) and not ((random_amount (14) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_21:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
not (((random_amount (14) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            >= random_amount (14)) and not ((random_amount (14) > 0)))))
---------------

---------------
!!! invariant '_inv_3' violated in S_21:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
not ((((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_21:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
not ((((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_21:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_21:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_21:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_21:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_21:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_21:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_21:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
(random_user (13) = user)
---------------

---------------
!!! invariant '_inv_3' cannot be verified in S_21:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
         + initial[random_amount, (7)])
        - ((0 + initial[random_amount, (0)]) - 2))
       + initial[random_amount, (13)]) > 20))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_21:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_21:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_21:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
not (((random_amount (13) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            + ((0 + random_amount (0)) - 2)) >= random_amount (13))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_21:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
(random_function (13) = none)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_21:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
(random_function (13) = none)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_21:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
(random_function (13) = none)
not (((random_amount (13) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            + ((0 + random_amount (0)) - 2)) >= random_amount (13))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_21:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
not ((random_function (13) = none))
((random_amount (13) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        + ((0 + random_amount (0)) - 2)) >= random_amount (13))
      and not ((random_amount (13) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_21:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
not ((random_function (13) = none))
not (((random_amount (13) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             + ((0 + random_amount (0)) - 2)) >= random_amount (13))
           and not ((random_amount (13) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_21:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
not (((((0 + random_amount (0)) - 2) >= 0)
      and (((balance (state_dao) + random_amount (0)) + random_amount (7))
           >= ((0 + random_amount (0)) - 2))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_21:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
not (((0 + random_amount (0)) > 0))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_21:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
not (((random_amount (7) >= 0)
      and (((balance (user) - random_amount (0)) >= random_amount (7))
           and not ((random_amount (7) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_21:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
not (((random_amount (7) >= 0)
      and (((balance (user) - random_amount (0)) >= random_amount (7))
           and not ((random_amount (7) > 0)))))
---------------

---------------
!!! invariant '_inv_3' violated in S_21:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
not (((balance (state_dao) + random_amount (0)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_21:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
not (((balance (state_dao) + random_amount (0)) <= 20))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_21:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_21:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_21:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_21:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_21:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_21:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_21:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_21:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_21:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_21:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

--- S_21 summary:
'_inv_1': met on 38 paths / definitely violated on 0 paths / cannot be verified on 0 paths
'_inv_2': met on 30 paths / definitely violated on 0 paths / cannot be verified on 8 paths
'_inv_3': met on 34 paths / definitely violated on 3 paths / cannot be verified on 1 paths
'_inv_4': met on 3 paths / definitely violated on 0 paths / cannot be verified on 35 paths
'_inv_5': met on 23 paths / definitely violated on 3 paths / cannot be verified on 12 paths

=== state S_22 =====================================
---------------
!!! invariant '_inv_4' cannot be verified in S_22:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_22:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_22:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
(random_user (7) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_22:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
(random_user (7) = user)
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_22:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
(random_user (14) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_22:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
(random_user (14) = user)
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_22:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (14)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
(random_user (21) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_22:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
(random_user (21) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_22:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  + initial[random_amount, (21)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_22:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  + initial[random_amount, (21)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_22:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (14)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
not (((random_amount (21) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            - random_amount (14)) >= random_amount (21))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_22:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
not (((random_amount (21) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            - random_amount (14)) >= random_amount (21))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_22:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  + initial[random_amount, (21)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
(random_function (21) = none)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_22:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  + initial[random_amount, (21)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
(random_function (21) = none)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_22:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (14)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
(random_function (21) = none)
not (((random_amount (21) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            - random_amount (14)) >= random_amount (21))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_22:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
(random_function (21) = none)
not (((random_amount (21) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            - random_amount (14)) >= random_amount (21))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_22:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  + initial[random_amount, (21)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
((random_amount (21) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) >= random_amount (21))
      and not ((random_amount (21) > 0))))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_22:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (14)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
not (((random_amount (21) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             - random_amount (14)) >= random_amount (21))
           and not ((random_amount (21) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_22:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
not (((random_amount (21) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             - random_amount (14)) >= random_amount (21))
           and not ((random_amount (21) > 0)))))
---------------

---------------
!!! invariant '_inv_3' violated in S_22:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
not (((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_22:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
not (((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14)) <= 20))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_22:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_22:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_22:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_22:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_22:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_22:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_22:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
(random_user (20) = user)
---------------

---------------
!!! invariant '_inv_3' cannot be verified in S_22:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not (((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
          + initial[random_amount, (7)]) + initial[random_amount, (14)])
        - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)])
           - 2)) + initial[random_amount, (20)]) > 20))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
(random_function (20) = deposit)
((random_amount (20) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14))
       + (((0 + random_amount (0)) + random_amount (7)) - 2))
      >= random_amount (20)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_22:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
  + initial[random_amount, (20)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
(random_function (20) = deposit)
((random_amount (20) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14))
       + (((0 + random_amount (0)) + random_amount (7)) - 2))
      >= random_amount (20)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_22:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
  + initial[random_amount, (20)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
(random_function (20) = deposit)
((random_amount (20) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14))
       + (((0 + random_amount (0)) + random_amount (7)) - 2))
      >= random_amount (20)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_22:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
(random_function (20) = deposit)
not (((random_amount (20) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             - random_amount (14))
            + (((0 + random_amount (0)) + random_amount (7)) - 2))
           >= random_amount (20))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_22:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
  + initial[random_amount, (20)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
not ((random_function (20) = deposit))
(random_function (20) = none)
((random_amount (20) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14))
       + (((0 + random_amount (0)) + random_amount (7)) - 2))
      >= random_amount (20)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_22:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
  + initial[random_amount, (20)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
not ((random_function (20) = deposit))
(random_function (20) = none)
((random_amount (20) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14))
       + (((0 + random_amount (0)) + random_amount (7)) - 2))
      >= random_amount (20)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_22:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
not ((random_function (20) = deposit))
(random_function (20) = none)
not (((random_amount (20) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             - random_amount (14))
            + (((0 + random_amount (0)) + random_amount (7)) - 2))
           >= random_amount (20))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_22:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
  + initial[random_amount, (20)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
not ((random_function (20) = deposit))
not ((random_function (20) = none))
((random_amount (20) >= 0)
 and ((((((balance (user) - random_amount (0)) - random_amount (7))
         - random_amount (14))
        + (((0 + random_amount (0)) + random_amount (7)) - 2))
       >= random_amount (20)) and not ((random_amount (20) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_22:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
not ((random_function (20) = deposit))
not ((random_function (20) = none))
not (((random_amount (20) >= 0)
      and ((((((balance (user) - random_amount (0)) - random_amount (7))
              - random_amount (14))
             + (((0 + random_amount (0)) + random_amount (7)) - 2))
            >= random_amount (20)) and not ((random_amount (20) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_22:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
not ((((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
      and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
            + random_amount (14))
           >= (((0 + random_amount (0)) + random_amount (7)) - 2))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_22:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
not ((((0 + random_amount (0)) + random_amount (7)) > 0))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_22:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
not (((random_amount (14) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            >= random_amount (14)) and not ((random_amount (14) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_22:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
not (((random_amount (14) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            >= random_amount (14)) and not ((random_amount (14) > 0)))))
---------------

---------------
!!! invariant '_inv_3' violated in S_22:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
not ((((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_22:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
not ((((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_22:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_22:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_22:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_22:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_22:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_22:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_22:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
(random_user (13) = user)
---------------

---------------
!!! invariant '_inv_3' cannot be verified in S_22:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
         + initial[random_amount, (7)])
        - ((0 + initial[random_amount, (0)]) - 2))
       + initial[random_amount, (13)]) > 20))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_22:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_22:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_22:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
not (((random_amount (13) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            + ((0 + random_amount (0)) - 2)) >= random_amount (13))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_22:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
(random_function (13) = none)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_22:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
(random_function (13) = none)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_22:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
(random_function (13) = none)
not (((random_amount (13) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            + ((0 + random_amount (0)) - 2)) >= random_amount (13))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_22:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
not ((random_function (13) = none))
((random_amount (13) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        + ((0 + random_amount (0)) - 2)) >= random_amount (13))
      and not ((random_amount (13) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_22:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
not ((random_function (13) = none))
not (((random_amount (13) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             + ((0 + random_amount (0)) - 2)) >= random_amount (13))
           and not ((random_amount (13) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_22:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
not (((((0 + random_amount (0)) - 2) >= 0)
      and (((balance (state_dao) + random_amount (0)) + random_amount (7))
           >= ((0 + random_amount (0)) - 2))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_22:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
not (((0 + random_amount (0)) > 0))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_22:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
not (((random_amount (7) >= 0)
      and (((balance (user) - random_amount (0)) >= random_amount (7))
           and not ((random_amount (7) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_22:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
not (((random_amount (7) >= 0)
      and (((balance (user) - random_amount (0)) >= random_amount (7))
           and not ((random_amount (7) > 0)))))
---------------

---------------
!!! invariant '_inv_3' violated in S_22:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
not (((balance (state_dao) + random_amount (0)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_22:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
not (((balance (state_dao) + random_amount (0)) <= 20))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_22:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_22:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_22:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_22:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_22:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_22:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_22:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_22:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_22:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_22:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

--- S_22 summary:
'_inv_1': met on 44 paths / definitely violated on 0 paths / cannot be verified on 0 paths
'_inv_2': met on 32 paths / definitely violated on 0 paths / cannot be verified on 12 paths
'_inv_3': met on 39 paths / definitely violated on 3 paths / cannot be verified on 2 paths
'_inv_4': met on 3 paths / definitely violated on 0 paths / cannot be verified on 41 paths
'_inv_5': met on 27 paths / definitely violated on 3 paths / cannot be verified on 14 paths

=== state S_23 =====================================
---------------
!!! invariant '_inv_4' cannot be verified in S_23:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_23:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_23:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
(random_user (7) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_23:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
(random_user (7) = user)
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_23:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
(random_user (14) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_23:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
(random_user (14) = user)
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_23:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (14)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
(random_user (21) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_23:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
(random_user (21) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_23:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  + initial[random_amount, (21)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_23:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  + initial[random_amount, (21)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_23:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (14)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
not (((random_amount (21) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            - random_amount (14)) >= random_amount (21))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_23:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
not (((random_amount (21) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            - random_amount (14)) >= random_amount (21))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_23:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  + initial[random_amount, (21)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
(random_function (21) = none)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_23:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  + initial[random_amount, (21)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
(random_function (21) = none)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_23:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (14)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
(random_function (21) = none)
not (((random_amount (21) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            - random_amount (14)) >= random_amount (21))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_23:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
(random_function (21) = none)
not (((random_amount (21) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            - random_amount (14)) >= random_amount (21))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_23:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  + initial[random_amount, (21)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
((random_amount (21) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) >= random_amount (21))
      and not ((random_amount (21) > 0))))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_23:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (14)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
not (((random_amount (21) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             - random_amount (14)) >= random_amount (21))
           and not ((random_amount (21) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_23:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
not (((random_amount (21) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             - random_amount (14)) >= random_amount (21))
           and not ((random_amount (21) > 0)))))
---------------

---------------
!!! invariant '_inv_3' violated in S_23:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
not (((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_23:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
not (((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14)) <= 20))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_23:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_23:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_23:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_23:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_23:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_23:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_23:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
(random_user (20) = user)
---------------

---------------
!!! invariant '_inv_3' cannot be verified in S_23:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not (((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
          + initial[random_amount, (7)]) + initial[random_amount, (14)])
        - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)])
           - 2)) + initial[random_amount, (20)]) > 20))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
(random_function (20) = deposit)
((random_amount (20) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14))
       + (((0 + random_amount (0)) + random_amount (7)) - 2))
      >= random_amount (20)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_23:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
  + initial[random_amount, (20)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
(random_function (20) = deposit)
((random_amount (20) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14))
       + (((0 + random_amount (0)) + random_amount (7)) - 2))
      >= random_amount (20)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_23:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
  + initial[random_amount, (20)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
(random_function (20) = deposit)
((random_amount (20) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14))
       + (((0 + random_amount (0)) + random_amount (7)) - 2))
      >= random_amount (20)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_23:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
(random_function (20) = deposit)
not (((random_amount (20) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             - random_amount (14))
            + (((0 + random_amount (0)) + random_amount (7)) - 2))
           >= random_amount (20))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_23:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
  + initial[random_amount, (20)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
not ((random_function (20) = deposit))
(random_function (20) = none)
((random_amount (20) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14))
       + (((0 + random_amount (0)) + random_amount (7)) - 2))
      >= random_amount (20)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_23:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
  + initial[random_amount, (20)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
not ((random_function (20) = deposit))
(random_function (20) = none)
((random_amount (20) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14))
       + (((0 + random_amount (0)) + random_amount (7)) - 2))
      >= random_amount (20)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_23:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
not ((random_function (20) = deposit))
(random_function (20) = none)
not (((random_amount (20) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             - random_amount (14))
            + (((0 + random_amount (0)) + random_amount (7)) - 2))
           >= random_amount (20))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_23:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
  + initial[random_amount, (20)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
not ((random_function (20) = deposit))
not ((random_function (20) = none))
((random_amount (20) >= 0)
 and ((((((balance (user) - random_amount (0)) - random_amount (7))
         - random_amount (14))
        + (((0 + random_amount (0)) + random_amount (7)) - 2))
       >= random_amount (20)) and not ((random_amount (20) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_23:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
not ((random_function (20) = deposit))
not ((random_function (20) = none))
not (((random_amount (20) >= 0)
      and ((((((balance (user) - random_amount (0)) - random_amount (7))
              - random_amount (14))
             + (((0 + random_amount (0)) + random_amount (7)) - 2))
            >= random_amount (20)) and not ((random_amount (20) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_23:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
not ((((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
      and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
            + random_amount (14))
           >= (((0 + random_amount (0)) + random_amount (7)) - 2))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_23:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
not ((((0 + random_amount (0)) + random_amount (7)) > 0))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_23:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
not (((random_amount (14) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            >= random_amount (14)) and not ((random_amount (14) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_23:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
not (((random_amount (14) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            >= random_amount (14)) and not ((random_amount (14) > 0)))))
---------------

---------------
!!! invariant '_inv_3' violated in S_23:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
not ((((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_23:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
not ((((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_23:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_23:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_23:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_23:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_23:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_23:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_23:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
(random_user (13) = user)
---------------

---------------
!!! invariant '_inv_3' cannot be verified in S_23:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
         + initial[random_amount, (7)])
        - ((0 + initial[random_amount, (0)]) - 2))
       + initial[random_amount, (13)]) > 20))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_23:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_23:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_23:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
not (((random_amount (13) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            + ((0 + random_amount (0)) - 2)) >= random_amount (13))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_23:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
(random_function (13) = none)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_23:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
(random_function (13) = none)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_23:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
(random_function (13) = none)
not (((random_amount (13) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            + ((0 + random_amount (0)) - 2)) >= random_amount (13))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_23:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
not ((random_function (13) = none))
((random_amount (13) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        + ((0 + random_amount (0)) - 2)) >= random_amount (13))
      and not ((random_amount (13) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_23:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
not ((random_function (13) = none))
not (((random_amount (13) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             + ((0 + random_amount (0)) - 2)) >= random_amount (13))
           and not ((random_amount (13) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_23:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
not (((((0 + random_amount (0)) - 2) >= 0)
      and (((balance (state_dao) + random_amount (0)) + random_amount (7))
           >= ((0 + random_amount (0)) - 2))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_23:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
not (((0 + random_amount (0)) > 0))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_23:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
not (((random_amount (7) >= 0)
      and (((balance (user) - random_amount (0)) >= random_amount (7))
           and not ((random_amount (7) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_23:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
not (((random_amount (7) >= 0)
      and (((balance (user) - random_amount (0)) >= random_amount (7))
           and not ((random_amount (7) > 0)))))
---------------

---------------
!!! invariant '_inv_3' violated in S_23:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
not (((balance (state_dao) + random_amount (0)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_23:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
not (((balance (state_dao) + random_amount (0)) <= 20))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_23:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_23:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_23:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_23:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_23:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_23:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_23:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_23:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_23:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_23:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

--- S_23 summary:
'_inv_1': met on 44 paths / definitely violated on 0 paths / cannot be verified on 0 paths
'_inv_2': met on 32 paths / definitely violated on 0 paths / cannot be verified on 12 paths
'_inv_3': met on 39 paths / definitely violated on 3 paths / cannot be verified on 2 paths
'_inv_4': met on 3 paths / definitely violated on 0 paths / cannot be verified on 41 paths
'_inv_5': met on 27 paths / definitely violated on 3 paths / cannot be verified on 14 paths

=== state S_24 =====================================
---------------
!!! invariant '_inv_4' cannot be verified in S_24:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_24:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_24:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
(random_user (7) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_24:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
(random_user (7) = user)
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_24:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
(random_user (14) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_24:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
(random_user (14) = user)
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_24:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (14)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
(random_user (21) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_24:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
(random_user (21) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_24:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  + initial[random_amount, (21)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_24:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  + initial[random_amount, (21)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_24:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (14)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
not (((random_amount (21) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            - random_amount (14)) >= random_amount (21))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_24:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
not (((random_amount (21) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            - random_amount (14)) >= random_amount (21))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_24:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  + initial[random_amount, (21)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
(random_function (21) = none)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_24:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  + initial[random_amount, (21)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
(random_function (21) = none)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_24:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (14)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
(random_function (21) = none)
not (((random_amount (21) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            - random_amount (14)) >= random_amount (21))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_24:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
(random_function (21) = none)
not (((random_amount (21) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            - random_amount (14)) >= random_amount (21))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_24:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  + initial[random_amount, (21)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
((random_amount (21) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) >= random_amount (21))
      and not ((random_amount (21) > 0))))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_24:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (14)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
not (((random_amount (21) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             - random_amount (14)) >= random_amount (21))
           and not ((random_amount (21) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_24:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
not (((random_amount (21) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             - random_amount (14)) >= random_amount (21))
           and not ((random_amount (21) > 0)))))
---------------

---------------
!!! invariant '_inv_3' violated in S_24:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
not (((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_24:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
not (((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14)) <= 20))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_24:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_24:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_24:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_24:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_24:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_24:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_24:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
(random_user (20) = user)
---------------

---------------
!!! invariant '_inv_3' cannot be verified in S_24:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not (((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
          + initial[random_amount, (7)]) + initial[random_amount, (14)])
        - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)])
           - 2)) + initial[random_amount, (20)]) > 20))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
(random_function (20) = deposit)
((random_amount (20) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14))
       + (((0 + random_amount (0)) + random_amount (7)) - 2))
      >= random_amount (20)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_24:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
  + initial[random_amount, (20)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
(random_function (20) = deposit)
((random_amount (20) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14))
       + (((0 + random_amount (0)) + random_amount (7)) - 2))
      >= random_amount (20)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_24:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
  + initial[random_amount, (20)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
(random_function (20) = deposit)
((random_amount (20) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14))
       + (((0 + random_amount (0)) + random_amount (7)) - 2))
      >= random_amount (20)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_24:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
(random_function (20) = deposit)
not (((random_amount (20) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             - random_amount (14))
            + (((0 + random_amount (0)) + random_amount (7)) - 2))
           >= random_amount (20))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_24:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
  + initial[random_amount, (20)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
not ((random_function (20) = deposit))
(random_function (20) = none)
((random_amount (20) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14))
       + (((0 + random_amount (0)) + random_amount (7)) - 2))
      >= random_amount (20)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_24:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
  + initial[random_amount, (20)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
not ((random_function (20) = deposit))
(random_function (20) = none)
((random_amount (20) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14))
       + (((0 + random_amount (0)) + random_amount (7)) - 2))
      >= random_amount (20)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_24:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
not ((random_function (20) = deposit))
(random_function (20) = none)
not (((random_amount (20) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             - random_amount (14))
            + (((0 + random_amount (0)) + random_amount (7)) - 2))
           >= random_amount (20))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_24:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
  + initial[random_amount, (20)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
not ((random_function (20) = deposit))
not ((random_function (20) = none))
((random_amount (20) >= 0)
 and ((((((balance (user) - random_amount (0)) - random_amount (7))
         - random_amount (14))
        + (((0 + random_amount (0)) + random_amount (7)) - 2))
       >= random_amount (20)) and not ((random_amount (20) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_24:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
not ((random_function (20) = deposit))
not ((random_function (20) = none))
not (((random_amount (20) >= 0)
      and ((((((balance (user) - random_amount (0)) - random_amount (7))
              - random_amount (14))
             + (((0 + random_amount (0)) + random_amount (7)) - 2))
            >= random_amount (20)) and not ((random_amount (20) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_24:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
not ((((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
      and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
            + random_amount (14))
           >= (((0 + random_amount (0)) + random_amount (7)) - 2))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_24:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
not ((((0 + random_amount (0)) + random_amount (7)) > 0))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_24:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
not (((random_amount (14) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            >= random_amount (14)) and not ((random_amount (14) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_24:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
not (((random_amount (14) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            >= random_amount (14)) and not ((random_amount (14) > 0)))))
---------------

---------------
!!! invariant '_inv_3' violated in S_24:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
not ((((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_24:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
not ((((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_24:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_24:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_24:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_24:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_24:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_24:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_24:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
(random_user (13) = user)
---------------

---------------
!!! invariant '_inv_3' cannot be verified in S_24:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
         + initial[random_amount, (7)])
        - ((0 + initial[random_amount, (0)]) - 2))
       + initial[random_amount, (13)]) > 20))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_24:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_24:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_24:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
not (((random_amount (13) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            + ((0 + random_amount (0)) - 2)) >= random_amount (13))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_24:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
(random_function (13) = none)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_24:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
(random_function (13) = none)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_24:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
(random_function (13) = none)
not (((random_amount (13) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            + ((0 + random_amount (0)) - 2)) >= random_amount (13))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_24:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
not ((random_function (13) = none))
((random_amount (13) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        + ((0 + random_amount (0)) - 2)) >= random_amount (13))
      and not ((random_amount (13) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_24:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
not ((random_function (13) = none))
not (((random_amount (13) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             + ((0 + random_amount (0)) - 2)) >= random_amount (13))
           and not ((random_amount (13) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_24:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
not (((((0 + random_amount (0)) - 2) >= 0)
      and (((balance (state_dao) + random_amount (0)) + random_amount (7))
           >= ((0 + random_amount (0)) - 2))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_24:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
not (((0 + random_amount (0)) > 0))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_24:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
not (((random_amount (7) >= 0)
      and (((balance (user) - random_amount (0)) >= random_amount (7))
           and not ((random_amount (7) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_24:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
not (((random_amount (7) >= 0)
      and (((balance (user) - random_amount (0)) >= random_amount (7))
           and not ((random_amount (7) > 0)))))
---------------

---------------
!!! invariant '_inv_3' violated in S_24:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
not (((balance (state_dao) + random_amount (0)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_24:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
not (((balance (state_dao) + random_amount (0)) <= 20))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_24:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_24:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_24:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_24:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_24:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_24:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_24:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_24:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_24:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_24:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

--- S_24 summary:
'_inv_1': met on 44 paths / definitely violated on 0 paths / cannot be verified on 0 paths
'_inv_2': met on 32 paths / definitely violated on 0 paths / cannot be verified on 12 paths
'_inv_3': met on 39 paths / definitely violated on 3 paths / cannot be verified on 2 paths
'_inv_4': met on 3 paths / definitely violated on 0 paths / cannot be verified on 41 paths
'_inv_5': met on 27 paths / definitely violated on 3 paths / cannot be verified on 14 paths

=== state S_25 =====================================
---------------
!!! invariant '_inv_4' cannot be verified in S_25:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_25:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_25:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
(random_user (7) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_25:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
(random_user (7) = user)
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_25:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
(random_user (14) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_25:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
(random_user (14) = user)
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_25:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (14)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
(random_user (21) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_25:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
(random_user (21) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_25:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  + initial[random_amount, (21)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
(((((balance (state_dao) + random_amount (0)) + random_amount (7))
   + random_amount (14)) + random_amount (21)) <= 20)
---------------

---------------
!!! invariant '_inv_3' violated in S_25:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
not ((((((balance (state_dao) + random_amount (0)) + random_amount (7))
        + random_amount (14)) + random_amount (21)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_25:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
not ((((((balance (state_dao) + random_amount (0)) + random_amount (7))
        + random_amount (14)) + random_amount (21)) <= 20))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_25:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (14)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
not (((random_amount (21) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            - random_amount (14)) >= random_amount (21))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_25:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
not (((random_amount (21) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            - random_amount (14)) >= random_amount (21))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_25:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  + initial[random_amount, (21)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
(random_function (21) = none)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_25:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  + initial[random_amount, (21)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
(random_function (21) = none)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_25:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (14)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
(random_function (21) = none)
not (((random_amount (21) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            - random_amount (14)) >= random_amount (21))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_25:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
(random_function (21) = none)
not (((random_amount (21) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            - random_amount (14)) >= random_amount (21))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_25:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  + initial[random_amount, (21)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
((random_amount (21) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) >= random_amount (21))
      and not ((random_amount (21) > 0))))
((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) > 0)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_25:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  + initial[random_amount, (21)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
((random_amount (21) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) >= random_amount (21))
      and not ((random_amount (21) > 0))))
not (((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) > 0))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_25:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (14)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
not (((random_amount (21) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             - random_amount (14)) >= random_amount (21))
           and not ((random_amount (21) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_25:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
not (((random_amount (21) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             - random_amount (14)) >= random_amount (21))
           and not ((random_amount (21) > 0)))))
---------------

---------------
!!! invariant '_inv_3' violated in S_25:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
not (((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_25:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
not (((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14)) <= 20))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_25:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_25:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_25:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_25:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_25:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_25:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_25:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
(random_user (20) = user)
---------------

---------------
!!! invariant '_inv_3' cannot be verified in S_25:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not (((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
          + initial[random_amount, (7)]) + initial[random_amount, (14)])
        - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)])
           - 2)) + initial[random_amount, (20)]) > 20))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
(random_function (20) = deposit)
((random_amount (20) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14))
       + (((0 + random_amount (0)) + random_amount (7)) - 2))
      >= random_amount (20)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_25:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
  + initial[random_amount, (20)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
(random_function (20) = deposit)
((random_amount (20) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14))
       + (((0 + random_amount (0)) + random_amount (7)) - 2))
      >= random_amount (20)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_25:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
  + initial[random_amount, (20)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
(random_function (20) = deposit)
((random_amount (20) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14))
       + (((0 + random_amount (0)) + random_amount (7)) - 2))
      >= random_amount (20)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_25:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
(random_function (20) = deposit)
not (((random_amount (20) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             - random_amount (14))
            + (((0 + random_amount (0)) + random_amount (7)) - 2))
           >= random_amount (20))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_25:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
  + initial[random_amount, (20)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
not ((random_function (20) = deposit))
(random_function (20) = none)
((random_amount (20) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14))
       + (((0 + random_amount (0)) + random_amount (7)) - 2))
      >= random_amount (20)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_25:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
  + initial[random_amount, (20)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
not ((random_function (20) = deposit))
(random_function (20) = none)
((random_amount (20) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14))
       + (((0 + random_amount (0)) + random_amount (7)) - 2))
      >= random_amount (20)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_25:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
not ((random_function (20) = deposit))
(random_function (20) = none)
not (((random_amount (20) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             - random_amount (14))
            + (((0 + random_amount (0)) + random_amount (7)) - 2))
           >= random_amount (20))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_25:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
  + initial[random_amount, (20)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
not ((random_function (20) = deposit))
not ((random_function (20) = none))
((random_amount (20) >= 0)
 and ((((((balance (user) - random_amount (0)) - random_amount (7))
         - random_amount (14))
        + (((0 + random_amount (0)) + random_amount (7)) - 2))
       >= random_amount (20)) and not ((random_amount (20) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_25:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
not ((random_function (20) = deposit))
not ((random_function (20) = none))
not (((random_amount (20) >= 0)
      and ((((((balance (user) - random_amount (0)) - random_amount (7))
              - random_amount (14))
             + (((0 + random_amount (0)) + random_amount (7)) - 2))
            >= random_amount (20)) and not ((random_amount (20) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_25:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
not ((((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
      and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
            + random_amount (14))
           >= (((0 + random_amount (0)) + random_amount (7)) - 2))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_25:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
not ((((0 + random_amount (0)) + random_amount (7)) > 0))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_25:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
not (((random_amount (14) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            >= random_amount (14)) and not ((random_amount (14) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_25:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
not (((random_amount (14) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            >= random_amount (14)) and not ((random_amount (14) > 0)))))
---------------

---------------
!!! invariant '_inv_3' violated in S_25:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
not ((((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_25:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
not ((((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_25:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_25:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_25:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_25:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_25:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_25:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_25:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
(random_user (13) = user)
---------------

---------------
!!! invariant '_inv_3' cannot be verified in S_25:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
         + initial[random_amount, (7)])
        - ((0 + initial[random_amount, (0)]) - 2))
       + initial[random_amount, (13)]) > 20))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_25:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_25:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_25:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
not (((random_amount (13) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            + ((0 + random_amount (0)) - 2)) >= random_amount (13))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_25:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
(random_function (13) = none)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_25:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
(random_function (13) = none)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_25:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
(random_function (13) = none)
not (((random_amount (13) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            + ((0 + random_amount (0)) - 2)) >= random_amount (13))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_25:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
not ((random_function (13) = none))
((random_amount (13) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        + ((0 + random_amount (0)) - 2)) >= random_amount (13))
      and not ((random_amount (13) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_25:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
not ((random_function (13) = none))
not (((random_amount (13) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             + ((0 + random_amount (0)) - 2)) >= random_amount (13))
           and not ((random_amount (13) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_25:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
not (((((0 + random_amount (0)) - 2) >= 0)
      and (((balance (state_dao) + random_amount (0)) + random_amount (7))
           >= ((0 + random_amount (0)) - 2))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_25:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
not (((0 + random_amount (0)) > 0))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_25:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
not (((random_amount (7) >= 0)
      and (((balance (user) - random_amount (0)) >= random_amount (7))
           and not ((random_amount (7) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_25:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
not (((random_amount (7) >= 0)
      and (((balance (user) - random_amount (0)) >= random_amount (7))
           and not ((random_amount (7) > 0)))))
---------------

---------------
!!! invariant '_inv_3' violated in S_25:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
not (((balance (state_dao) + random_amount (0)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_25:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
not (((balance (state_dao) + random_amount (0)) <= 20))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_25:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_25:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_25:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_25:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_25:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_25:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_25:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_25:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_25:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_25:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

--- S_25 summary:
'_inv_1': met on 46 paths / definitely violated on 0 paths / cannot be verified on 0 paths
'_inv_2': met on 34 paths / definitely violated on 0 paths / cannot be verified on 12 paths
'_inv_3': met on 40 paths / definitely violated on 4 paths / cannot be verified on 2 paths
'_inv_4': met on 4 paths / definitely violated on 0 paths / cannot be verified on 42 paths
'_inv_5': met on 29 paths / definitely violated on 4 paths / cannot be verified on 13 paths

=== state S_26 =====================================
---------------
!!! invariant '_inv_4' cannot be verified in S_26:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_26:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_26:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
(random_user (7) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_26:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
(random_user (7) = user)
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_26:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
(random_user (14) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_26:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
(random_user (14) = user)
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_26:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (14)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
(random_user (21) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_26:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
(random_user (21) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_26:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  + initial[random_amount, (21)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
(((((balance (state_dao) + random_amount (0)) + random_amount (7))
   + random_amount (14)) + random_amount (21)) <= 20)
---------------

---------------
!!! invariant '_inv_3' violated in S_26:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
not ((((((balance (state_dao) + random_amount (0)) + random_amount (7))
        + random_amount (14)) + random_amount (21)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_26:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
not ((((((balance (state_dao) + random_amount (0)) + random_amount (7))
        + random_amount (14)) + random_amount (21)) <= 20))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_26:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (14)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
not (((random_amount (21) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            - random_amount (14)) >= random_amount (21))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_26:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
not (((random_amount (21) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            - random_amount (14)) >= random_amount (21))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_26:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  + initial[random_amount, (21)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
(random_function (21) = none)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_26:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  + initial[random_amount, (21)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
(random_function (21) = none)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_26:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (14)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
(random_function (21) = none)
not (((random_amount (21) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            - random_amount (14)) >= random_amount (21))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_26:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
(random_function (21) = none)
not (((random_amount (21) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            - random_amount (14)) >= random_amount (21))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_26:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   + initial[random_amount, (21)])
  - ((((0 + initial[random_amount, (0)]) + initial[random_amount, (7)])
      + initial[random_amount, (14)]) - 2)) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
((random_amount (21) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) >= random_amount (21))
      and not ((random_amount (21) > 0))))
((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) > 0)
((((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) - 2)
  >= 0)
 and (((((balance (state_dao) + random_amount (0)) + random_amount (7))
        + random_amount (14)) + random_amount (21))
      >= ((((0 + random_amount (0)) + random_amount (7)) + random_amount (14))
          - 2)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_26:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  + initial[random_amount, (21)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
((random_amount (21) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) >= random_amount (21))
      and not ((random_amount (21) > 0))))
((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) > 0)
not (((((((0 + random_amount (0)) + random_amount (7)) + random_amount (14))
        - 2) >= 0)
      and (((((balance (state_dao) + random_amount (0)) + random_amount (7))
             + random_amount (14)) + random_amount (21))
           >= ((((0 + random_amount (0)) + random_amount (7))
                + random_amount (14)) - 2))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_26:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  + initial[random_amount, (21)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
((random_amount (21) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) >= random_amount (21))
      and not ((random_amount (21) > 0))))
not (((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) > 0))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_26:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (14)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
not (((random_amount (21) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             - random_amount (14)) >= random_amount (21))
           and not ((random_amount (21) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_26:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
not (((random_amount (21) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             - random_amount (14)) >= random_amount (21))
           and not ((random_amount (21) > 0)))))
---------------

---------------
!!! invariant '_inv_3' violated in S_26:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
not (((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_26:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
not (((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14)) <= 20))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_26:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_26:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_26:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_26:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_26:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_26:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_26:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
(random_user (20) = user)
---------------

---------------
!!! invariant '_inv_3' cannot be verified in S_26:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not (((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
          + initial[random_amount, (7)]) + initial[random_amount, (14)])
        - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)])
           - 2)) + initial[random_amount, (20)]) > 20))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
(random_function (20) = deposit)
((random_amount (20) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14))
       + (((0 + random_amount (0)) + random_amount (7)) - 2))
      >= random_amount (20)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_26:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
  + initial[random_amount, (20)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
(random_function (20) = deposit)
((random_amount (20) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14))
       + (((0 + random_amount (0)) + random_amount (7)) - 2))
      >= random_amount (20)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_26:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
  + initial[random_amount, (20)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
(random_function (20) = deposit)
((random_amount (20) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14))
       + (((0 + random_amount (0)) + random_amount (7)) - 2))
      >= random_amount (20)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_26:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
(random_function (20) = deposit)
not (((random_amount (20) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             - random_amount (14))
            + (((0 + random_amount (0)) + random_amount (7)) - 2))
           >= random_amount (20))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_26:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
  + initial[random_amount, (20)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
not ((random_function (20) = deposit))
(random_function (20) = none)
((random_amount (20) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14))
       + (((0 + random_amount (0)) + random_amount (7)) - 2))
      >= random_amount (20)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_26:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
  + initial[random_amount, (20)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
not ((random_function (20) = deposit))
(random_function (20) = none)
((random_amount (20) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14))
       + (((0 + random_amount (0)) + random_amount (7)) - 2))
      >= random_amount (20)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_26:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
not ((random_function (20) = deposit))
(random_function (20) = none)
not (((random_amount (20) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             - random_amount (14))
            + (((0 + random_amount (0)) + random_amount (7)) - 2))
           >= random_amount (20))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_26:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
  + initial[random_amount, (20)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
not ((random_function (20) = deposit))
not ((random_function (20) = none))
((random_amount (20) >= 0)
 and ((((((balance (user) - random_amount (0)) - random_amount (7))
         - random_amount (14))
        + (((0 + random_amount (0)) + random_amount (7)) - 2))
       >= random_amount (20)) and not ((random_amount (20) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_26:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
not ((random_function (20) = deposit))
not ((random_function (20) = none))
not (((random_amount (20) >= 0)
      and ((((((balance (user) - random_amount (0)) - random_amount (7))
              - random_amount (14))
             + (((0 + random_amount (0)) + random_amount (7)) - 2))
            >= random_amount (20)) and not ((random_amount (20) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_26:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
not ((((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
      and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
            + random_amount (14))
           >= (((0 + random_amount (0)) + random_amount (7)) - 2))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_26:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
not ((((0 + random_amount (0)) + random_amount (7)) > 0))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_26:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
not (((random_amount (14) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            >= random_amount (14)) and not ((random_amount (14) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_26:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
not (((random_amount (14) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            >= random_amount (14)) and not ((random_amount (14) > 0)))))
---------------

---------------
!!! invariant '_inv_3' violated in S_26:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
not ((((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_26:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
not ((((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_26:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_26:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_26:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_26:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_26:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_26:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_26:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
(random_user (13) = user)
---------------

---------------
!!! invariant '_inv_3' cannot be verified in S_26:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
         + initial[random_amount, (7)])
        - ((0 + initial[random_amount, (0)]) - 2))
       + initial[random_amount, (13)]) > 20))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_26:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_26:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_26:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
not (((random_amount (13) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            + ((0 + random_amount (0)) - 2)) >= random_amount (13))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_26:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
(random_function (13) = none)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_26:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
(random_function (13) = none)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_26:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
(random_function (13) = none)
not (((random_amount (13) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            + ((0 + random_amount (0)) - 2)) >= random_amount (13))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_26:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
not ((random_function (13) = none))
((random_amount (13) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        + ((0 + random_amount (0)) - 2)) >= random_amount (13))
      and not ((random_amount (13) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_26:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
not ((random_function (13) = none))
not (((random_amount (13) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             + ((0 + random_amount (0)) - 2)) >= random_amount (13))
           and not ((random_amount (13) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_26:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
not (((((0 + random_amount (0)) - 2) >= 0)
      and (((balance (state_dao) + random_amount (0)) + random_amount (7))
           >= ((0 + random_amount (0)) - 2))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_26:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
not (((0 + random_amount (0)) > 0))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_26:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
not (((random_amount (7) >= 0)
      and (((balance (user) - random_amount (0)) >= random_amount (7))
           and not ((random_amount (7) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_26:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
not (((random_amount (7) >= 0)
      and (((balance (user) - random_amount (0)) >= random_amount (7))
           and not ((random_amount (7) > 0)))))
---------------

---------------
!!! invariant '_inv_3' violated in S_26:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
not (((balance (state_dao) + random_amount (0)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_26:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
not (((balance (state_dao) + random_amount (0)) <= 20))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_26:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_26:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_26:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_26:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_26:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_26:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_26:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_26:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_26:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_26:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

--- S_26 summary:
'_inv_1': met on 47 paths / definitely violated on 0 paths / cannot be verified on 0 paths
'_inv_2': met on 35 paths / definitely violated on 0 paths / cannot be verified on 12 paths
'_inv_3': met on 41 paths / definitely violated on 4 paths / cannot be verified on 2 paths
'_inv_4': met on 4 paths / definitely violated on 0 paths / cannot be verified on 43 paths
'_inv_5': met on 30 paths / definitely violated on 4 paths / cannot be verified on 13 paths

=== state S_27 =====================================
---------------
!!! invariant '_inv_4' cannot be verified in S_27:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_27:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_27:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
(random_user (7) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_27:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
(random_user (7) = user)
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_27:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
(random_user (14) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_27:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
(random_user (14) = user)
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_27:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (14)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
(random_user (21) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_27:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
(random_user (21) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_27:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  + initial[random_amount, (21)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
(((((balance (state_dao) + random_amount (0)) + random_amount (7))
   + random_amount (14)) + random_amount (21)) <= 20)
---------------

---------------
!!! invariant '_inv_3' violated in S_27:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
not ((((((balance (state_dao) + random_amount (0)) + random_amount (7))
        + random_amount (14)) + random_amount (21)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_27:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
not ((((((balance (state_dao) + random_amount (0)) + random_amount (7))
        + random_amount (14)) + random_amount (21)) <= 20))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_27:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (14)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
not (((random_amount (21) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            - random_amount (14)) >= random_amount (21))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_27:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
not (((random_amount (21) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            - random_amount (14)) >= random_amount (21))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_27:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  + initial[random_amount, (21)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
(random_function (21) = none)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_27:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  + initial[random_amount, (21)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
(random_function (21) = none)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_27:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (14)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
(random_function (21) = none)
not (((random_amount (21) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            - random_amount (14)) >= random_amount (21))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_27:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
(random_function (21) = none)
not (((random_amount (21) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            - random_amount (14)) >= random_amount (21))))
---------------

---------------
!!! invariant '_inv_1' violated in S_27:
(((current_layer = 0) and not (exception)) implies (state = INITIALSTATE))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
((random_amount (21) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) >= random_amount (21))
      and not ((random_amount (21) > 0))))
((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) > 0)
((((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) - 2)
  >= 0)
 and (((((balance (state_dao) + random_amount (0)) + random_amount (7))
        + random_amount (14)) + random_amount (21))
      >= ((((0 + random_amount (0)) + random_amount (7)) + random_amount (14))
          - 2)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_27:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   + initial[random_amount, (21)])
  - ((((0 + initial[random_amount, (0)]) + initial[random_amount, (7)])
      + initial[random_amount, (14)]) - 2)) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
((random_amount (21) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) >= random_amount (21))
      and not ((random_amount (21) > 0))))
((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) > 0)
((((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) - 2)
  >= 0)
 and (((((balance (state_dao) + random_amount (0)) + random_amount (7))
        + random_amount (14)) + random_amount (21))
      >= ((((0 + random_amount (0)) + random_amount (7)) + random_amount (14))
          - 2)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_27:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  + initial[random_amount, (21)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
((random_amount (21) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) >= random_amount (21))
      and not ((random_amount (21) > 0))))
((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) > 0)
not (((((((0 + random_amount (0)) + random_amount (7)) + random_amount (14))
        - 2) >= 0)
      and (((((balance (state_dao) + random_amount (0)) + random_amount (7))
             + random_amount (14)) + random_amount (21))
           >= ((((0 + random_amount (0)) + random_amount (7))
                + random_amount (14)) - 2))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_27:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  + initial[random_amount, (21)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
((random_amount (21) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) >= random_amount (21))
      and not ((random_amount (21) > 0))))
not (((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) > 0))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_27:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (14)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
not (((random_amount (21) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             - random_amount (14)) >= random_amount (21))
           and not ((random_amount (21) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_27:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
not (((random_amount (21) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             - random_amount (14)) >= random_amount (21))
           and not ((random_amount (21) > 0)))))
---------------

---------------
!!! invariant '_inv_3' violated in S_27:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
not (((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_27:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
not (((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14)) <= 20))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_27:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_27:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_27:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_27:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_27:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_27:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_27:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
(random_user (20) = user)
---------------

---------------
!!! invariant '_inv_3' cannot be verified in S_27:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not (((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
          + initial[random_amount, (7)]) + initial[random_amount, (14)])
        - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)])
           - 2)) + initial[random_amount, (20)]) > 20))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
(random_function (20) = deposit)
((random_amount (20) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14))
       + (((0 + random_amount (0)) + random_amount (7)) - 2))
      >= random_amount (20)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_27:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
  + initial[random_amount, (20)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
(random_function (20) = deposit)
((random_amount (20) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14))
       + (((0 + random_amount (0)) + random_amount (7)) - 2))
      >= random_amount (20)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_27:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
  + initial[random_amount, (20)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
(random_function (20) = deposit)
((random_amount (20) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14))
       + (((0 + random_amount (0)) + random_amount (7)) - 2))
      >= random_amount (20)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_27:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
(random_function (20) = deposit)
not (((random_amount (20) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             - random_amount (14))
            + (((0 + random_amount (0)) + random_amount (7)) - 2))
           >= random_amount (20))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_27:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
  + initial[random_amount, (20)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
not ((random_function (20) = deposit))
(random_function (20) = none)
((random_amount (20) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14))
       + (((0 + random_amount (0)) + random_amount (7)) - 2))
      >= random_amount (20)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_27:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
  + initial[random_amount, (20)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
not ((random_function (20) = deposit))
(random_function (20) = none)
((random_amount (20) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14))
       + (((0 + random_amount (0)) + random_amount (7)) - 2))
      >= random_amount (20)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_27:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
not ((random_function (20) = deposit))
(random_function (20) = none)
not (((random_amount (20) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             - random_amount (14))
            + (((0 + random_amount (0)) + random_amount (7)) - 2))
           >= random_amount (20))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_27:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
  + initial[random_amount, (20)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
not ((random_function (20) = deposit))
not ((random_function (20) = none))
((random_amount (20) >= 0)
 and ((((((balance (user) - random_amount (0)) - random_amount (7))
         - random_amount (14))
        + (((0 + random_amount (0)) + random_amount (7)) - 2))
       >= random_amount (20)) and not ((random_amount (20) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_27:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
not ((random_function (20) = deposit))
not ((random_function (20) = none))
not (((random_amount (20) >= 0)
      and ((((((balance (user) - random_amount (0)) - random_amount (7))
              - random_amount (14))
             + (((0 + random_amount (0)) + random_amount (7)) - 2))
            >= random_amount (20)) and not ((random_amount (20) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_27:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
not ((((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
      and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
            + random_amount (14))
           >= (((0 + random_amount (0)) + random_amount (7)) - 2))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_27:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
not ((((0 + random_amount (0)) + random_amount (7)) > 0))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_27:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
not (((random_amount (14) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            >= random_amount (14)) and not ((random_amount (14) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_27:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
not (((random_amount (14) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            >= random_amount (14)) and not ((random_amount (14) > 0)))))
---------------

---------------
!!! invariant '_inv_3' violated in S_27:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
not ((((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_27:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
not ((((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_27:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_27:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_27:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_27:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_27:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_27:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_27:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
(random_user (13) = user)
---------------

---------------
!!! invariant '_inv_3' cannot be verified in S_27:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
         + initial[random_amount, (7)])
        - ((0 + initial[random_amount, (0)]) - 2))
       + initial[random_amount, (13)]) > 20))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_27:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_27:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_27:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
not (((random_amount (13) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            + ((0 + random_amount (0)) - 2)) >= random_amount (13))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_27:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
(random_function (13) = none)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_27:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
(random_function (13) = none)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_27:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
(random_function (13) = none)
not (((random_amount (13) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            + ((0 + random_amount (0)) - 2)) >= random_amount (13))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_27:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
not ((random_function (13) = none))
((random_amount (13) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        + ((0 + random_amount (0)) - 2)) >= random_amount (13))
      and not ((random_amount (13) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_27:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
not ((random_function (13) = none))
not (((random_amount (13) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             + ((0 + random_amount (0)) - 2)) >= random_amount (13))
           and not ((random_amount (13) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_27:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
not (((((0 + random_amount (0)) - 2) >= 0)
      and (((balance (state_dao) + random_amount (0)) + random_amount (7))
           >= ((0 + random_amount (0)) - 2))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_27:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
not (((0 + random_amount (0)) > 0))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_27:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
not (((random_amount (7) >= 0)
      and (((balance (user) - random_amount (0)) >= random_amount (7))
           and not ((random_amount (7) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_27:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
not (((random_amount (7) >= 0)
      and (((balance (user) - random_amount (0)) >= random_amount (7))
           and not ((random_amount (7) > 0)))))
---------------

---------------
!!! invariant '_inv_3' violated in S_27:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
not (((balance (state_dao) + random_amount (0)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_27:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
not (((balance (state_dao) + random_amount (0)) <= 20))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_27:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_27:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_27:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_27:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_27:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_27:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_27:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_27:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_27:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_27:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

--- S_27 summary:
'_inv_1': met on 46 paths / definitely violated on 1 paths / cannot be verified on 0 paths
'_inv_2': met on 35 paths / definitely violated on 0 paths / cannot be verified on 12 paths
'_inv_3': met on 41 paths / definitely violated on 4 paths / cannot be verified on 2 paths
'_inv_4': met on 4 paths / definitely violated on 0 paths / cannot be verified on 43 paths
'_inv_5': met on 30 paths / definitely violated on 4 paths / cannot be verified on 13 paths

=== state S_28 =====================================
---------------
!!! invariant '_inv_4' cannot be verified in S_28:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_28:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_28:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
(random_user (7) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_28:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
(random_user (7) = user)
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_28:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
(random_user (14) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_28:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
(random_user (14) = user)
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_28:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (14)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
(random_user (21) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_28:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
(random_user (21) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_28:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  + initial[random_amount, (21)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
(((((balance (state_dao) + random_amount (0)) + random_amount (7))
   + random_amount (14)) + random_amount (21)) <= 20)
---------------

---------------
!!! invariant '_inv_3' violated in S_28:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
not ((((((balance (state_dao) + random_amount (0)) + random_amount (7))
        + random_amount (14)) + random_amount (21)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_28:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
not ((((((balance (state_dao) + random_amount (0)) + random_amount (7))
        + random_amount (14)) + random_amount (21)) <= 20))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_28:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (14)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
not (((random_amount (21) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            - random_amount (14)) >= random_amount (21))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_28:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
not (((random_amount (21) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            - random_amount (14)) >= random_amount (21))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_28:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  + initial[random_amount, (21)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
(random_function (21) = none)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_28:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  + initial[random_amount, (21)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
(random_function (21) = none)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_28:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (14)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
(random_function (21) = none)
not (((random_amount (21) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            - random_amount (14)) >= random_amount (21))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_28:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
(random_function (21) = none)
not (((random_amount (21) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            - random_amount (14)) >= random_amount (21))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_28:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   + initial[random_amount, (21)])
  - ((((0 + initial[random_amount, (0)]) + initial[random_amount, (7)])
      + initial[random_amount, (14)]) - 2)) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
((random_amount (21) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) >= random_amount (21))
      and not ((random_amount (21) > 0))))
((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) > 0)
((((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) - 2)
  >= 0)
 and (((((balance (state_dao) + random_amount (0)) + random_amount (7))
        + random_amount (14)) + random_amount (21))
      >= ((((0 + random_amount (0)) + random_amount (7)) + random_amount (14))
          - 2)))
(random_user (27) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_28:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
      + initial[random_amount, (7)]) + initial[random_amount, (14)])
    + initial[random_amount, (21)])
   - ((((0 + initial[random_amount, (0)]) + initial[random_amount, (7)])
       + initial[random_amount, (14)]) - 2)) + initial[random_amount, (27)])
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
((random_amount (21) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) >= random_amount (21))
      and not ((random_amount (21) > 0))))
((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) > 0)
((((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) - 2)
  >= 0)
 and (((((balance (state_dao) + random_amount (0)) + random_amount (7))
        + random_amount (14)) + random_amount (21))
      >= ((((0 + random_amount (0)) + random_amount (7)) + random_amount (14))
          - 2)))
not ((random_user (27) = user))
(random_function (27) = deposit)
((random_amount (27) >= 0)
 and ((((((balance (user) - random_amount (0)) - random_amount (7))
         - random_amount (14)) - random_amount (21))
       + ((((0 + random_amount (0)) + random_amount (7)) + random_amount (14))
          - 2)) >= random_amount (27)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_28:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
      + initial[random_amount, (7)]) + initial[random_amount, (14)])
    + initial[random_amount, (21)])
   - ((((0 + initial[random_amount, (0)]) + initial[random_amount, (7)])
       + initial[random_amount, (14)]) - 2)) + initial[random_amount, (27)])
 <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
((random_amount (21) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) >= random_amount (21))
      and not ((random_amount (21) > 0))))
((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) > 0)
((((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) - 2)
  >= 0)
 and (((((balance (state_dao) + random_amount (0)) + random_amount (7))
        + random_amount (14)) + random_amount (21))
      >= ((((0 + random_amount (0)) + random_amount (7)) + random_amount (14))
          - 2)))
not ((random_user (27) = user))
(random_function (27) = deposit)
((random_amount (27) >= 0)
 and ((((((balance (user) - random_amount (0)) - random_amount (7))
         - random_amount (14)) - random_amount (21))
       + ((((0 + random_amount (0)) + random_amount (7)) + random_amount (14))
          - 2)) >= random_amount (27)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_28:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   + initial[random_amount, (21)])
  - ((((0 + initial[random_amount, (0)]) + initial[random_amount, (7)])
      + initial[random_amount, (14)]) - 2)) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
((random_amount (21) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) >= random_amount (21))
      and not ((random_amount (21) > 0))))
((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) > 0)
((((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) - 2)
  >= 0)
 and (((((balance (state_dao) + random_amount (0)) + random_amount (7))
        + random_amount (14)) + random_amount (21))
      >= ((((0 + random_amount (0)) + random_amount (7)) + random_amount (14))
          - 2)))
not ((random_user (27) = user))
(random_function (27) = deposit)
not (((random_amount (27) >= 0)
      and ((((((balance (user) - random_amount (0)) - random_amount (7))
              - random_amount (14)) - random_amount (21))
            + ((((0 + random_amount (0)) + random_amount (7))
                + random_amount (14)) - 2)) >= random_amount (27))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_28:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
      + initial[random_amount, (7)]) + initial[random_amount, (14)])
    + initial[random_amount, (21)])
   - ((((0 + initial[random_amount, (0)]) + initial[random_amount, (7)])
       + initial[random_amount, (14)]) - 2)) + initial[random_amount, (27)])
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
((random_amount (21) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) >= random_amount (21))
      and not ((random_amount (21) > 0))))
((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) > 0)
((((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) - 2)
  >= 0)
 and (((((balance (state_dao) + random_amount (0)) + random_amount (7))
        + random_amount (14)) + random_amount (21))
      >= ((((0 + random_amount (0)) + random_amount (7)) + random_amount (14))
          - 2)))
not ((random_user (27) = user))
not ((random_function (27) = deposit))
(random_function (27) = none)
((random_amount (27) >= 0)
 and ((((((balance (user) - random_amount (0)) - random_amount (7))
         - random_amount (14)) - random_amount (21))
       + ((((0 + random_amount (0)) + random_amount (7)) + random_amount (14))
          - 2)) >= random_amount (27)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_28:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
      + initial[random_amount, (7)]) + initial[random_amount, (14)])
    + initial[random_amount, (21)])
   - ((((0 + initial[random_amount, (0)]) + initial[random_amount, (7)])
       + initial[random_amount, (14)]) - 2)) + initial[random_amount, (27)])
 <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
((random_amount (21) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) >= random_amount (21))
      and not ((random_amount (21) > 0))))
((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) > 0)
((((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) - 2)
  >= 0)
 and (((((balance (state_dao) + random_amount (0)) + random_amount (7))
        + random_amount (14)) + random_amount (21))
      >= ((((0 + random_amount (0)) + random_amount (7)) + random_amount (14))
          - 2)))
not ((random_user (27) = user))
not ((random_function (27) = deposit))
(random_function (27) = none)
((random_amount (27) >= 0)
 and ((((((balance (user) - random_amount (0)) - random_amount (7))
         - random_amount (14)) - random_amount (21))
       + ((((0 + random_amount (0)) + random_amount (7)) + random_amount (14))
          - 2)) >= random_amount (27)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_28:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   + initial[random_amount, (21)])
  - ((((0 + initial[random_amount, (0)]) + initial[random_amount, (7)])
      + initial[random_amount, (14)]) - 2)) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
((random_amount (21) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) >= random_amount (21))
      and not ((random_amount (21) > 0))))
((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) > 0)
((((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) - 2)
  >= 0)
 and (((((balance (state_dao) + random_amount (0)) + random_amount (7))
        + random_amount (14)) + random_amount (21))
      >= ((((0 + random_amount (0)) + random_amount (7)) + random_amount (14))
          - 2)))
not ((random_user (27) = user))
not ((random_function (27) = deposit))
(random_function (27) = none)
not (((random_amount (27) >= 0)
      and ((((((balance (user) - random_amount (0)) - random_amount (7))
              - random_amount (14)) - random_amount (21))
            + ((((0 + random_amount (0)) + random_amount (7))
                + random_amount (14)) - 2)) >= random_amount (27))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_28:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
      + initial[random_amount, (7)]) + initial[random_amount, (14)])
    + initial[random_amount, (21)])
   - ((((0 + initial[random_amount, (0)]) + initial[random_amount, (7)])
       + initial[random_amount, (14)]) - 2)) + initial[random_amount, (27)])
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
((random_amount (21) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) >= random_amount (21))
      and not ((random_amount (21) > 0))))
((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) > 0)
((((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) - 2)
  >= 0)
 and (((((balance (state_dao) + random_amount (0)) + random_amount (7))
        + random_amount (14)) + random_amount (21))
      >= ((((0 + random_amount (0)) + random_amount (7)) + random_amount (14))
          - 2)))
not ((random_user (27) = user))
not ((random_function (27) = deposit))
not ((random_function (27) = none))
((random_amount (27) >= 0)
 and (((((((balance (user) - random_amount (0)) - random_amount (7))
          - random_amount (14)) - random_amount (21))
        + ((((0 + random_amount (0)) + random_amount (7)) + random_amount (14))
           - 2)) >= random_amount (27)) and not ((random_amount (27) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_28:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   + initial[random_amount, (21)])
  - ((((0 + initial[random_amount, (0)]) + initial[random_amount, (7)])
      + initial[random_amount, (14)]) - 2)) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
((random_amount (21) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) >= random_amount (21))
      and not ((random_amount (21) > 0))))
((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) > 0)
((((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) - 2)
  >= 0)
 and (((((balance (state_dao) + random_amount (0)) + random_amount (7))
        + random_amount (14)) + random_amount (21))
      >= ((((0 + random_amount (0)) + random_amount (7)) + random_amount (14))
          - 2)))
not ((random_user (27) = user))
not ((random_function (27) = deposit))
not ((random_function (27) = none))
not (((random_amount (27) >= 0)
      and (((((((balance (user) - random_amount (0)) - random_amount (7))
               - random_amount (14)) - random_amount (21))
             + ((((0 + random_amount (0)) + random_amount (7))
                 + random_amount (14)) - 2)) >= random_amount (27))
           and not ((random_amount (27) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_28:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  + initial[random_amount, (21)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
((random_amount (21) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) >= random_amount (21))
      and not ((random_amount (21) > 0))))
((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) > 0)
not (((((((0 + random_amount (0)) + random_amount (7)) + random_amount (14))
        - 2) >= 0)
      and (((((balance (state_dao) + random_amount (0)) + random_amount (7))
             + random_amount (14)) + random_amount (21))
           >= ((((0 + random_amount (0)) + random_amount (7))
                + random_amount (14)) - 2))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_28:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  + initial[random_amount, (21)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
((random_amount (21) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) >= random_amount (21))
      and not ((random_amount (21) > 0))))
not (((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) > 0))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_28:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (14)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
not (((random_amount (21) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             - random_amount (14)) >= random_amount (21))
           and not ((random_amount (21) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_28:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
not (((random_amount (21) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             - random_amount (14)) >= random_amount (21))
           and not ((random_amount (21) > 0)))))
---------------

---------------
!!! invariant '_inv_3' violated in S_28:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
not (((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_28:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
not (((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14)) <= 20))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_28:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_28:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_28:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_28:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_28:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_28:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_28:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
(random_user (20) = user)
---------------

---------------
!!! invariant '_inv_3' cannot be verified in S_28:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not (((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
          + initial[random_amount, (7)]) + initial[random_amount, (14)])
        - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)])
           - 2)) + initial[random_amount, (20)]) > 20))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
(random_function (20) = deposit)
((random_amount (20) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14))
       + (((0 + random_amount (0)) + random_amount (7)) - 2))
      >= random_amount (20)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_28:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
  + initial[random_amount, (20)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
(random_function (20) = deposit)
((random_amount (20) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14))
       + (((0 + random_amount (0)) + random_amount (7)) - 2))
      >= random_amount (20)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_28:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
  + initial[random_amount, (20)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
(random_function (20) = deposit)
((random_amount (20) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14))
       + (((0 + random_amount (0)) + random_amount (7)) - 2))
      >= random_amount (20)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_28:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
(random_function (20) = deposit)
not (((random_amount (20) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             - random_amount (14))
            + (((0 + random_amount (0)) + random_amount (7)) - 2))
           >= random_amount (20))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_28:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
  + initial[random_amount, (20)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
not ((random_function (20) = deposit))
(random_function (20) = none)
((random_amount (20) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14))
       + (((0 + random_amount (0)) + random_amount (7)) - 2))
      >= random_amount (20)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_28:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
  + initial[random_amount, (20)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
not ((random_function (20) = deposit))
(random_function (20) = none)
((random_amount (20) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14))
       + (((0 + random_amount (0)) + random_amount (7)) - 2))
      >= random_amount (20)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_28:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
not ((random_function (20) = deposit))
(random_function (20) = none)
not (((random_amount (20) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             - random_amount (14))
            + (((0 + random_amount (0)) + random_amount (7)) - 2))
           >= random_amount (20))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_28:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
  + initial[random_amount, (20)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
not ((random_function (20) = deposit))
not ((random_function (20) = none))
((random_amount (20) >= 0)
 and ((((((balance (user) - random_amount (0)) - random_amount (7))
         - random_amount (14))
        + (((0 + random_amount (0)) + random_amount (7)) - 2))
       >= random_amount (20)) and not ((random_amount (20) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_28:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
not ((random_function (20) = deposit))
not ((random_function (20) = none))
not (((random_amount (20) >= 0)
      and ((((((balance (user) - random_amount (0)) - random_amount (7))
              - random_amount (14))
             + (((0 + random_amount (0)) + random_amount (7)) - 2))
            >= random_amount (20)) and not ((random_amount (20) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_28:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
not ((((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
      and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
            + random_amount (14))
           >= (((0 + random_amount (0)) + random_amount (7)) - 2))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_28:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
not ((((0 + random_amount (0)) + random_amount (7)) > 0))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_28:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
not (((random_amount (14) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            >= random_amount (14)) and not ((random_amount (14) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_28:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
not (((random_amount (14) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            >= random_amount (14)) and not ((random_amount (14) > 0)))))
---------------

---------------
!!! invariant '_inv_3' violated in S_28:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
not ((((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_28:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
not ((((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_28:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_28:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_28:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_28:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_28:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_28:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_28:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
(random_user (13) = user)
---------------

---------------
!!! invariant '_inv_3' cannot be verified in S_28:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
         + initial[random_amount, (7)])
        - ((0 + initial[random_amount, (0)]) - 2))
       + initial[random_amount, (13)]) > 20))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_28:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_28:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_28:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
not (((random_amount (13) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            + ((0 + random_amount (0)) - 2)) >= random_amount (13))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_28:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
(random_function (13) = none)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_28:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
(random_function (13) = none)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_28:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
(random_function (13) = none)
not (((random_amount (13) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            + ((0 + random_amount (0)) - 2)) >= random_amount (13))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_28:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
not ((random_function (13) = none))
((random_amount (13) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        + ((0 + random_amount (0)) - 2)) >= random_amount (13))
      and not ((random_amount (13) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_28:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
not ((random_function (13) = none))
not (((random_amount (13) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             + ((0 + random_amount (0)) - 2)) >= random_amount (13))
           and not ((random_amount (13) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_28:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
not (((((0 + random_amount (0)) - 2) >= 0)
      and (((balance (state_dao) + random_amount (0)) + random_amount (7))
           >= ((0 + random_amount (0)) - 2))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_28:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
not (((0 + random_amount (0)) > 0))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_28:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
not (((random_amount (7) >= 0)
      and (((balance (user) - random_amount (0)) >= random_amount (7))
           and not ((random_amount (7) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_28:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
not (((random_amount (7) >= 0)
      and (((balance (user) - random_amount (0)) >= random_amount (7))
           and not ((random_amount (7) > 0)))))
---------------

---------------
!!! invariant '_inv_3' violated in S_28:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
not (((balance (state_dao) + random_amount (0)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_28:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
not (((balance (state_dao) + random_amount (0)) <= 20))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_28:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_28:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_28:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_28:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_28:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_28:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_28:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_28:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_28:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_28:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

--- S_28 summary:
'_inv_1': met on 53 paths / definitely violated on 0 paths / cannot be verified on 0 paths
'_inv_2': met on 41 paths / definitely violated on 0 paths / cannot be verified on 12 paths
'_inv_3': met on 47 paths / definitely violated on 4 paths / cannot be verified on 2 paths
'_inv_4': met on 4 paths / definitely violated on 0 paths / cannot be verified on 49 paths
'_inv_5': met on 34 paths / definitely violated on 4 paths / cannot be verified on 15 paths

=== state S_29 =====================================
---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_29:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_29:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
(random_user (7) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
(random_user (7) = user)
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_29:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
(random_user (14) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
(random_user (14) = user)
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_29:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (14)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
(random_user (21) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
(random_user (21) = user)
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_29:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (21)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
(((((balance (state_dao) + random_amount (0)) + random_amount (7))
   + random_amount (14)) + random_amount (21)) <= 20)
(random_user (28) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  + initial[random_amount, (21)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
(((((balance (state_dao) + random_amount (0)) + random_amount (7))
   + random_amount (14)) + random_amount (21)) <= 20)
(random_user (28) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   + initial[random_amount, (21)]) + initial[random_amount, (28)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
(((((balance (state_dao) + random_amount (0)) + random_amount (7))
   + random_amount (14)) + random_amount (21)) <= 20)
not ((random_user (28) = user))
(random_function (28) = deposit)
((random_amount (28) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) - random_amount (21)) >= random_amount (28)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_29:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   + initial[random_amount, (21)]) + initial[random_amount, (28)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
(((((balance (state_dao) + random_amount (0)) + random_amount (7))
   + random_amount (14)) + random_amount (21)) <= 20)
not ((random_user (28) = user))
(random_function (28) = deposit)
((random_amount (28) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) - random_amount (21)) >= random_amount (28)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_29:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (21)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
(((((balance (state_dao) + random_amount (0)) + random_amount (7))
   + random_amount (14)) + random_amount (21)) <= 20)
not ((random_user (28) = user))
(random_function (28) = deposit)
not (((random_amount (28) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             - random_amount (14)) - random_amount (21))
           >= random_amount (28))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  + initial[random_amount, (21)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
(((((balance (state_dao) + random_amount (0)) + random_amount (7))
   + random_amount (14)) + random_amount (21)) <= 20)
not ((random_user (28) = user))
(random_function (28) = deposit)
not (((random_amount (28) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             - random_amount (14)) - random_amount (21))
           >= random_amount (28))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   + initial[random_amount, (21)]) + initial[random_amount, (28)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
(((((balance (state_dao) + random_amount (0)) + random_amount (7))
   + random_amount (14)) + random_amount (21)) <= 20)
not ((random_user (28) = user))
not ((random_function (28) = deposit))
(random_function (28) = none)
((random_amount (28) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) - random_amount (21)) >= random_amount (28)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_29:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   + initial[random_amount, (21)]) + initial[random_amount, (28)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
(((((balance (state_dao) + random_amount (0)) + random_amount (7))
   + random_amount (14)) + random_amount (21)) <= 20)
not ((random_user (28) = user))
not ((random_function (28) = deposit))
(random_function (28) = none)
((random_amount (28) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) - random_amount (21)) >= random_amount (28)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_29:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (21)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
(((((balance (state_dao) + random_amount (0)) + random_amount (7))
   + random_amount (14)) + random_amount (21)) <= 20)
not ((random_user (28) = user))
not ((random_function (28) = deposit))
(random_function (28) = none)
not (((random_amount (28) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             - random_amount (14)) - random_amount (21))
           >= random_amount (28))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  + initial[random_amount, (21)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
(((((balance (state_dao) + random_amount (0)) + random_amount (7))
   + random_amount (14)) + random_amount (21)) <= 20)
not ((random_user (28) = user))
not ((random_function (28) = deposit))
(random_function (28) = none)
not (((random_amount (28) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             - random_amount (14)) - random_amount (21))
           >= random_amount (28))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   + initial[random_amount, (21)]) + initial[random_amount, (28)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
(((((balance (state_dao) + random_amount (0)) + random_amount (7))
   + random_amount (14)) + random_amount (21)) <= 20)
not ((random_user (28) = user))
not ((random_function (28) = deposit))
not ((random_function (28) = none))
((random_amount (28) >= 0)
 and ((((((balance (user) - random_amount (0)) - random_amount (7))
         - random_amount (14)) - random_amount (21)) >= random_amount (28))
      and not ((random_amount (28) > 0))))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_29:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (21)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
(((((balance (state_dao) + random_amount (0)) + random_amount (7))
   + random_amount (14)) + random_amount (21)) <= 20)
not ((random_user (28) = user))
not ((random_function (28) = deposit))
not ((random_function (28) = none))
not (((random_amount (28) >= 0)
      and ((((((balance (user) - random_amount (0)) - random_amount (7))
              - random_amount (14)) - random_amount (21)) >= random_amount (28))
           and not ((random_amount (28) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  + initial[random_amount, (21)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
(((((balance (state_dao) + random_amount (0)) + random_amount (7))
   + random_amount (14)) + random_amount (21)) <= 20)
not ((random_user (28) = user))
not ((random_function (28) = deposit))
not ((random_function (28) = none))
not (((random_amount (28) >= 0)
      and ((((((balance (user) - random_amount (0)) - random_amount (7))
              - random_amount (14)) - random_amount (21)) >= random_amount (28))
           and not ((random_amount (28) > 0)))))
---------------

---------------
!!! invariant '_inv_3' violated in S_29:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
not ((((((balance (state_dao) + random_amount (0)) + random_amount (7))
        + random_amount (14)) + random_amount (21)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_29:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
not ((((((balance (state_dao) + random_amount (0)) + random_amount (7))
        + random_amount (14)) + random_amount (21)) <= 20))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_29:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (14)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
not (((random_amount (21) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            - random_amount (14)) >= random_amount (21))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
not (((random_amount (21) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            - random_amount (14)) >= random_amount (21))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  + initial[random_amount, (21)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
(random_function (21) = none)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_29:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  + initial[random_amount, (21)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
(random_function (21) = none)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_29:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (14)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
(random_function (21) = none)
not (((random_amount (21) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            - random_amount (14)) >= random_amount (21))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
(random_function (21) = none)
not (((random_amount (21) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            - random_amount (14)) >= random_amount (21))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   + initial[random_amount, (21)])
  - ((((0 + initial[random_amount, (0)]) + initial[random_amount, (7)])
      + initial[random_amount, (14)]) - 2)) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
((random_amount (21) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) >= random_amount (21))
      and not ((random_amount (21) > 0))))
((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) > 0)
((((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) - 2)
  >= 0)
 and (((((balance (state_dao) + random_amount (0)) + random_amount (7))
        + random_amount (14)) + random_amount (21))
      >= ((((0 + random_amount (0)) + random_amount (7)) + random_amount (14))
          - 2)))
(random_user (27) = user)
---------------

---------------
!!! invariant '_inv_3' cannot be verified in S_29:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
           + initial[random_amount, (7)]) + initial[random_amount, (14)])
         + initial[random_amount, (21)])
        - ((((0 + initial[random_amount, (0)]) + initial[random_amount, (7)])
            + initial[random_amount, (14)]) - 2))
       + initial[random_amount, (27)]) > 20))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
((random_amount (21) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) >= random_amount (21))
      and not ((random_amount (21) > 0))))
((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) > 0)
((((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) - 2)
  >= 0)
 and (((((balance (state_dao) + random_amount (0)) + random_amount (7))
        + random_amount (14)) + random_amount (21))
      >= ((((0 + random_amount (0)) + random_amount (7)) + random_amount (14))
          - 2)))
not ((random_user (27) = user))
(random_function (27) = deposit)
((random_amount (27) >= 0)
 and ((((((balance (user) - random_amount (0)) - random_amount (7))
         - random_amount (14)) - random_amount (21))
       + ((((0 + random_amount (0)) + random_amount (7)) + random_amount (14))
          - 2)) >= random_amount (27)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
      + initial[random_amount, (7)]) + initial[random_amount, (14)])
    + initial[random_amount, (21)])
   - ((((0 + initial[random_amount, (0)]) + initial[random_amount, (7)])
       + initial[random_amount, (14)]) - 2)) + initial[random_amount, (27)])
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
((random_amount (21) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) >= random_amount (21))
      and not ((random_amount (21) > 0))))
((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) > 0)
((((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) - 2)
  >= 0)
 and (((((balance (state_dao) + random_amount (0)) + random_amount (7))
        + random_amount (14)) + random_amount (21))
      >= ((((0 + random_amount (0)) + random_amount (7)) + random_amount (14))
          - 2)))
not ((random_user (27) = user))
(random_function (27) = deposit)
((random_amount (27) >= 0)
 and ((((((balance (user) - random_amount (0)) - random_amount (7))
         - random_amount (14)) - random_amount (21))
       + ((((0 + random_amount (0)) + random_amount (7)) + random_amount (14))
          - 2)) >= random_amount (27)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_29:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
      + initial[random_amount, (7)]) + initial[random_amount, (14)])
    + initial[random_amount, (21)])
   - ((((0 + initial[random_amount, (0)]) + initial[random_amount, (7)])
       + initial[random_amount, (14)]) - 2)) + initial[random_amount, (27)])
 <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
((random_amount (21) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) >= random_amount (21))
      and not ((random_amount (21) > 0))))
((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) > 0)
((((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) - 2)
  >= 0)
 and (((((balance (state_dao) + random_amount (0)) + random_amount (7))
        + random_amount (14)) + random_amount (21))
      >= ((((0 + random_amount (0)) + random_amount (7)) + random_amount (14))
          - 2)))
not ((random_user (27) = user))
(random_function (27) = deposit)
((random_amount (27) >= 0)
 and ((((((balance (user) - random_amount (0)) - random_amount (7))
         - random_amount (14)) - random_amount (21))
       + ((((0 + random_amount (0)) + random_amount (7)) + random_amount (14))
          - 2)) >= random_amount (27)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   + initial[random_amount, (21)])
  - ((((0 + initial[random_amount, (0)]) + initial[random_amount, (7)])
      + initial[random_amount, (14)]) - 2)) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
((random_amount (21) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) >= random_amount (21))
      and not ((random_amount (21) > 0))))
((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) > 0)
((((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) - 2)
  >= 0)
 and (((((balance (state_dao) + random_amount (0)) + random_amount (7))
        + random_amount (14)) + random_amount (21))
      >= ((((0 + random_amount (0)) + random_amount (7)) + random_amount (14))
          - 2)))
not ((random_user (27) = user))
(random_function (27) = deposit)
not (((random_amount (27) >= 0)
      and ((((((balance (user) - random_amount (0)) - random_amount (7))
              - random_amount (14)) - random_amount (21))
            + ((((0 + random_amount (0)) + random_amount (7))
                + random_amount (14)) - 2)) >= random_amount (27))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
      + initial[random_amount, (7)]) + initial[random_amount, (14)])
    + initial[random_amount, (21)])
   - ((((0 + initial[random_amount, (0)]) + initial[random_amount, (7)])
       + initial[random_amount, (14)]) - 2)) + initial[random_amount, (27)])
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
((random_amount (21) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) >= random_amount (21))
      and not ((random_amount (21) > 0))))
((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) > 0)
((((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) - 2)
  >= 0)
 and (((((balance (state_dao) + random_amount (0)) + random_amount (7))
        + random_amount (14)) + random_amount (21))
      >= ((((0 + random_amount (0)) + random_amount (7)) + random_amount (14))
          - 2)))
not ((random_user (27) = user))
not ((random_function (27) = deposit))
(random_function (27) = none)
((random_amount (27) >= 0)
 and ((((((balance (user) - random_amount (0)) - random_amount (7))
         - random_amount (14)) - random_amount (21))
       + ((((0 + random_amount (0)) + random_amount (7)) + random_amount (14))
          - 2)) >= random_amount (27)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_29:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
      + initial[random_amount, (7)]) + initial[random_amount, (14)])
    + initial[random_amount, (21)])
   - ((((0 + initial[random_amount, (0)]) + initial[random_amount, (7)])
       + initial[random_amount, (14)]) - 2)) + initial[random_amount, (27)])
 <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
((random_amount (21) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) >= random_amount (21))
      and not ((random_amount (21) > 0))))
((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) > 0)
((((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) - 2)
  >= 0)
 and (((((balance (state_dao) + random_amount (0)) + random_amount (7))
        + random_amount (14)) + random_amount (21))
      >= ((((0 + random_amount (0)) + random_amount (7)) + random_amount (14))
          - 2)))
not ((random_user (27) = user))
not ((random_function (27) = deposit))
(random_function (27) = none)
((random_amount (27) >= 0)
 and ((((((balance (user) - random_amount (0)) - random_amount (7))
         - random_amount (14)) - random_amount (21))
       + ((((0 + random_amount (0)) + random_amount (7)) + random_amount (14))
          - 2)) >= random_amount (27)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   + initial[random_amount, (21)])
  - ((((0 + initial[random_amount, (0)]) + initial[random_amount, (7)])
      + initial[random_amount, (14)]) - 2)) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
((random_amount (21) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) >= random_amount (21))
      and not ((random_amount (21) > 0))))
((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) > 0)
((((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) - 2)
  >= 0)
 and (((((balance (state_dao) + random_amount (0)) + random_amount (7))
        + random_amount (14)) + random_amount (21))
      >= ((((0 + random_amount (0)) + random_amount (7)) + random_amount (14))
          - 2)))
not ((random_user (27) = user))
not ((random_function (27) = deposit))
(random_function (27) = none)
not (((random_amount (27) >= 0)
      and ((((((balance (user) - random_amount (0)) - random_amount (7))
              - random_amount (14)) - random_amount (21))
            + ((((0 + random_amount (0)) + random_amount (7))
                + random_amount (14)) - 2)) >= random_amount (27))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
      + initial[random_amount, (7)]) + initial[random_amount, (14)])
    + initial[random_amount, (21)])
   - ((((0 + initial[random_amount, (0)]) + initial[random_amount, (7)])
       + initial[random_amount, (14)]) - 2)) + initial[random_amount, (27)])
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
((random_amount (21) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) >= random_amount (21))
      and not ((random_amount (21) > 0))))
((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) > 0)
((((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) - 2)
  >= 0)
 and (((((balance (state_dao) + random_amount (0)) + random_amount (7))
        + random_amount (14)) + random_amount (21))
      >= ((((0 + random_amount (0)) + random_amount (7)) + random_amount (14))
          - 2)))
not ((random_user (27) = user))
not ((random_function (27) = deposit))
not ((random_function (27) = none))
((random_amount (27) >= 0)
 and (((((((balance (user) - random_amount (0)) - random_amount (7))
          - random_amount (14)) - random_amount (21))
        + ((((0 + random_amount (0)) + random_amount (7)) + random_amount (14))
           - 2)) >= random_amount (27)) and not ((random_amount (27) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   + initial[random_amount, (21)])
  - ((((0 + initial[random_amount, (0)]) + initial[random_amount, (7)])
      + initial[random_amount, (14)]) - 2)) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
((random_amount (21) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) >= random_amount (21))
      and not ((random_amount (21) > 0))))
((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) > 0)
((((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) - 2)
  >= 0)
 and (((((balance (state_dao) + random_amount (0)) + random_amount (7))
        + random_amount (14)) + random_amount (21))
      >= ((((0 + random_amount (0)) + random_amount (7)) + random_amount (14))
          - 2)))
not ((random_user (27) = user))
not ((random_function (27) = deposit))
not ((random_function (27) = none))
not (((random_amount (27) >= 0)
      and (((((((balance (user) - random_amount (0)) - random_amount (7))
               - random_amount (14)) - random_amount (21))
             + ((((0 + random_amount (0)) + random_amount (7))
                 + random_amount (14)) - 2)) >= random_amount (27))
           and not ((random_amount (27) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  + initial[random_amount, (21)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
((random_amount (21) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) >= random_amount (21))
      and not ((random_amount (21) > 0))))
((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) > 0)
not (((((((0 + random_amount (0)) + random_amount (7)) + random_amount (14))
        - 2) >= 0)
      and (((((balance (state_dao) + random_amount (0)) + random_amount (7))
             + random_amount (14)) + random_amount (21))
           >= ((((0 + random_amount (0)) + random_amount (7))
                + random_amount (14)) - 2))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  + initial[random_amount, (21)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
((random_amount (21) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) >= random_amount (21))
      and not ((random_amount (21) > 0))))
not (((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) > 0))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_29:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (14)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
not (((random_amount (21) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             - random_amount (14)) >= random_amount (21))
           and not ((random_amount (21) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
not (((random_amount (21) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             - random_amount (14)) >= random_amount (21))
           and not ((random_amount (21) > 0)))))
---------------

---------------
!!! invariant '_inv_3' violated in S_29:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
not (((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_29:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
not (((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14)) <= 20))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_29:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_29:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_29:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
(random_user (20) = user)
---------------

---------------
!!! invariant '_inv_3' cannot be verified in S_29:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not (((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
          + initial[random_amount, (7)]) + initial[random_amount, (14)])
        - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)])
           - 2)) + initial[random_amount, (20)]) > 20))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
(random_function (20) = deposit)
((random_amount (20) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14))
       + (((0 + random_amount (0)) + random_amount (7)) - 2))
      >= random_amount (20)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
  + initial[random_amount, (20)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
(random_function (20) = deposit)
((random_amount (20) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14))
       + (((0 + random_amount (0)) + random_amount (7)) - 2))
      >= random_amount (20)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_29:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
  + initial[random_amount, (20)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
(random_function (20) = deposit)
((random_amount (20) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14))
       + (((0 + random_amount (0)) + random_amount (7)) - 2))
      >= random_amount (20)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
(random_function (20) = deposit)
not (((random_amount (20) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             - random_amount (14))
            + (((0 + random_amount (0)) + random_amount (7)) - 2))
           >= random_amount (20))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
  + initial[random_amount, (20)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
not ((random_function (20) = deposit))
(random_function (20) = none)
((random_amount (20) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14))
       + (((0 + random_amount (0)) + random_amount (7)) - 2))
      >= random_amount (20)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_29:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
  + initial[random_amount, (20)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
not ((random_function (20) = deposit))
(random_function (20) = none)
((random_amount (20) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14))
       + (((0 + random_amount (0)) + random_amount (7)) - 2))
      >= random_amount (20)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
not ((random_function (20) = deposit))
(random_function (20) = none)
not (((random_amount (20) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             - random_amount (14))
            + (((0 + random_amount (0)) + random_amount (7)) - 2))
           >= random_amount (20))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
  + initial[random_amount, (20)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
not ((random_function (20) = deposit))
not ((random_function (20) = none))
((random_amount (20) >= 0)
 and ((((((balance (user) - random_amount (0)) - random_amount (7))
         - random_amount (14))
        + (((0 + random_amount (0)) + random_amount (7)) - 2))
       >= random_amount (20)) and not ((random_amount (20) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
not ((random_function (20) = deposit))
not ((random_function (20) = none))
not (((random_amount (20) >= 0)
      and ((((((balance (user) - random_amount (0)) - random_amount (7))
              - random_amount (14))
             + (((0 + random_amount (0)) + random_amount (7)) - 2))
            >= random_amount (20)) and not ((random_amount (20) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
not ((((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
      and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
            + random_amount (14))
           >= (((0 + random_amount (0)) + random_amount (7)) - 2))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
not ((((0 + random_amount (0)) + random_amount (7)) > 0))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_29:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
not (((random_amount (14) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            >= random_amount (14)) and not ((random_amount (14) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
not (((random_amount (14) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            >= random_amount (14)) and not ((random_amount (14) > 0)))))
---------------

---------------
!!! invariant '_inv_3' violated in S_29:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
not ((((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_29:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
not ((((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_29:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_29:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_29:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
(random_user (13) = user)
---------------

---------------
!!! invariant '_inv_3' cannot be verified in S_29:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
         + initial[random_amount, (7)])
        - ((0 + initial[random_amount, (0)]) - 2))
       + initial[random_amount, (13)]) > 20))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_29:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
not (((random_amount (13) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            + ((0 + random_amount (0)) - 2)) >= random_amount (13))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
(random_function (13) = none)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_29:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
(random_function (13) = none)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
(random_function (13) = none)
not (((random_amount (13) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            + ((0 + random_amount (0)) - 2)) >= random_amount (13))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
not ((random_function (13) = none))
((random_amount (13) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        + ((0 + random_amount (0)) - 2)) >= random_amount (13))
      and not ((random_amount (13) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
not ((random_function (13) = none))
not (((random_amount (13) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             + ((0 + random_amount (0)) - 2)) >= random_amount (13))
           and not ((random_amount (13) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
not (((((0 + random_amount (0)) - 2) >= 0)
      and (((balance (state_dao) + random_amount (0)) + random_amount (7))
           >= ((0 + random_amount (0)) - 2))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
not (((0 + random_amount (0)) > 0))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_29:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
not (((random_amount (7) >= 0)
      and (((balance (user) - random_amount (0)) >= random_amount (7))
           and not ((random_amount (7) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
not (((random_amount (7) >= 0)
      and (((balance (user) - random_amount (0)) >= random_amount (7))
           and not ((random_amount (7) > 0)))))
---------------

---------------
!!! invariant '_inv_3' violated in S_29:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
not (((balance (state_dao) + random_amount (0)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_29:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
not (((balance (state_dao) + random_amount (0)) <= 20))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_29:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_29:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_29:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_29:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_29:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_29:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

--- S_29 summary:
'_inv_1': met on 59 paths / definitely violated on 0 paths / cannot be verified on 0 paths
'_inv_2': met on 43 paths / definitely violated on 0 paths / cannot be verified on 16 paths
'_inv_3': met on 52 paths / definitely violated on 4 paths / cannot be verified on 3 paths
'_inv_4': met on 4 paths / definitely violated on 0 paths / cannot be verified on 55 paths
'_inv_5': met on 38 paths / definitely violated on 4 paths / cannot be verified on 17 paths

=== state S_30 =====================================
---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_30:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
(random_user (0) = user)
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_30:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
(random_user (7) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
(random_user (7) = user)
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_30:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
(random_user (14) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
(random_user (14) = user)
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_30:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (14)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
(random_user (21) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
(random_user (21) = user)
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_30:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (21)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
(((((balance (state_dao) + random_amount (0)) + random_amount (7))
   + random_amount (14)) + random_amount (21)) <= 20)
(random_user (28) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  + initial[random_amount, (21)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
(((((balance (state_dao) + random_amount (0)) + random_amount (7))
   + random_amount (14)) + random_amount (21)) <= 20)
(random_user (28) = user)
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   + initial[random_amount, (21)]) + initial[random_amount, (28)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
(((((balance (state_dao) + random_amount (0)) + random_amount (7))
   + random_amount (14)) + random_amount (21)) <= 20)
not ((random_user (28) = user))
(random_function (28) = deposit)
((random_amount (28) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) - random_amount (21)) >= random_amount (28)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_30:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   + initial[random_amount, (21)]) + initial[random_amount, (28)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
(((((balance (state_dao) + random_amount (0)) + random_amount (7))
   + random_amount (14)) + random_amount (21)) <= 20)
not ((random_user (28) = user))
(random_function (28) = deposit)
((random_amount (28) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) - random_amount (21)) >= random_amount (28)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_30:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (21)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
(((((balance (state_dao) + random_amount (0)) + random_amount (7))
   + random_amount (14)) + random_amount (21)) <= 20)
not ((random_user (28) = user))
(random_function (28) = deposit)
not (((random_amount (28) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             - random_amount (14)) - random_amount (21))
           >= random_amount (28))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  + initial[random_amount, (21)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
(((((balance (state_dao) + random_amount (0)) + random_amount (7))
   + random_amount (14)) + random_amount (21)) <= 20)
not ((random_user (28) = user))
(random_function (28) = deposit)
not (((random_amount (28) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             - random_amount (14)) - random_amount (21))
           >= random_amount (28))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   + initial[random_amount, (21)]) + initial[random_amount, (28)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
(((((balance (state_dao) + random_amount (0)) + random_amount (7))
   + random_amount (14)) + random_amount (21)) <= 20)
not ((random_user (28) = user))
not ((random_function (28) = deposit))
(random_function (28) = none)
((random_amount (28) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) - random_amount (21)) >= random_amount (28)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_30:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   + initial[random_amount, (21)]) + initial[random_amount, (28)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
(((((balance (state_dao) + random_amount (0)) + random_amount (7))
   + random_amount (14)) + random_amount (21)) <= 20)
not ((random_user (28) = user))
not ((random_function (28) = deposit))
(random_function (28) = none)
((random_amount (28) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) - random_amount (21)) >= random_amount (28)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_30:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (21)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
(((((balance (state_dao) + random_amount (0)) + random_amount (7))
   + random_amount (14)) + random_amount (21)) <= 20)
not ((random_user (28) = user))
not ((random_function (28) = deposit))
(random_function (28) = none)
not (((random_amount (28) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             - random_amount (14)) - random_amount (21))
           >= random_amount (28))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  + initial[random_amount, (21)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
(((((balance (state_dao) + random_amount (0)) + random_amount (7))
   + random_amount (14)) + random_amount (21)) <= 20)
not ((random_user (28) = user))
not ((random_function (28) = deposit))
(random_function (28) = none)
not (((random_amount (28) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             - random_amount (14)) - random_amount (21))
           >= random_amount (28))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   + initial[random_amount, (21)]) + initial[random_amount, (28)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
(((((balance (state_dao) + random_amount (0)) + random_amount (7))
   + random_amount (14)) + random_amount (21)) <= 20)
not ((random_user (28) = user))
not ((random_function (28) = deposit))
not ((random_function (28) = none))
((random_amount (28) >= 0)
 and ((((((balance (user) - random_amount (0)) - random_amount (7))
         - random_amount (14)) - random_amount (21)) >= random_amount (28))
      and not ((random_amount (28) > 0))))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_30:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (21)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
(((((balance (state_dao) + random_amount (0)) + random_amount (7))
   + random_amount (14)) + random_amount (21)) <= 20)
not ((random_user (28) = user))
not ((random_function (28) = deposit))
not ((random_function (28) = none))
not (((random_amount (28) >= 0)
      and ((((((balance (user) - random_amount (0)) - random_amount (7))
              - random_amount (14)) - random_amount (21)) >= random_amount (28))
           and not ((random_amount (28) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  + initial[random_amount, (21)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
(((((balance (state_dao) + random_amount (0)) + random_amount (7))
   + random_amount (14)) + random_amount (21)) <= 20)
not ((random_user (28) = user))
not ((random_function (28) = deposit))
not ((random_function (28) = none))
not (((random_amount (28) >= 0)
      and ((((((balance (user) - random_amount (0)) - random_amount (7))
              - random_amount (14)) - random_amount (21)) >= random_amount (28))
           and not ((random_amount (28) > 0)))))
---------------

---------------
!!! invariant '_inv_3' violated in S_30:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
not ((((((balance (state_dao) + random_amount (0)) + random_amount (7))
        + random_amount (14)) + random_amount (21)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_30:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
not ((((((balance (state_dao) + random_amount (0)) + random_amount (7))
        + random_amount (14)) + random_amount (21)) <= 20))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_30:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (14)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
not (((random_amount (21) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            - random_amount (14)) >= random_amount (21))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
(random_function (21) = deposit)
not (((random_amount (21) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            - random_amount (14)) >= random_amount (21))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  + initial[random_amount, (21)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
(random_function (21) = none)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_30:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  + initial[random_amount, (21)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
(random_function (21) = none)
((random_amount (21) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       - random_amount (14)) >= random_amount (21)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_30:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (14)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
(random_function (21) = none)
not (((random_amount (21) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            - random_amount (14)) >= random_amount (21))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
(random_function (21) = none)
not (((random_amount (21) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            - random_amount (14)) >= random_amount (21))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   + initial[random_amount, (21)])
  - ((((0 + initial[random_amount, (0)]) + initial[random_amount, (7)])
      + initial[random_amount, (14)]) - 2)) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
((random_amount (21) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) >= random_amount (21))
      and not ((random_amount (21) > 0))))
((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) > 0)
((((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) - 2)
  >= 0)
 and (((((balance (state_dao) + random_amount (0)) + random_amount (7))
        + random_amount (14)) + random_amount (21))
      >= ((((0 + random_amount (0)) + random_amount (7)) + random_amount (14))
          - 2)))
(random_user (27) = user)
---------------

---------------
!!! invariant '_inv_3' cannot be verified in S_30:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
           + initial[random_amount, (7)]) + initial[random_amount, (14)])
         + initial[random_amount, (21)])
        - ((((0 + initial[random_amount, (0)]) + initial[random_amount, (7)])
            + initial[random_amount, (14)]) - 2))
       + initial[random_amount, (27)]) > 20))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
((random_amount (21) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) >= random_amount (21))
      and not ((random_amount (21) > 0))))
((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) > 0)
((((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) - 2)
  >= 0)
 and (((((balance (state_dao) + random_amount (0)) + random_amount (7))
        + random_amount (14)) + random_amount (21))
      >= ((((0 + random_amount (0)) + random_amount (7)) + random_amount (14))
          - 2)))
not ((random_user (27) = user))
(random_function (27) = deposit)
((random_amount (27) >= 0)
 and ((((((balance (user) - random_amount (0)) - random_amount (7))
         - random_amount (14)) - random_amount (21))
       + ((((0 + random_amount (0)) + random_amount (7)) + random_amount (14))
          - 2)) >= random_amount (27)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
      + initial[random_amount, (7)]) + initial[random_amount, (14)])
    + initial[random_amount, (21)])
   - ((((0 + initial[random_amount, (0)]) + initial[random_amount, (7)])
       + initial[random_amount, (14)]) - 2)) + initial[random_amount, (27)])
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
((random_amount (21) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) >= random_amount (21))
      and not ((random_amount (21) > 0))))
((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) > 0)
((((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) - 2)
  >= 0)
 and (((((balance (state_dao) + random_amount (0)) + random_amount (7))
        + random_amount (14)) + random_amount (21))
      >= ((((0 + random_amount (0)) + random_amount (7)) + random_amount (14))
          - 2)))
not ((random_user (27) = user))
(random_function (27) = deposit)
((random_amount (27) >= 0)
 and ((((((balance (user) - random_amount (0)) - random_amount (7))
         - random_amount (14)) - random_amount (21))
       + ((((0 + random_amount (0)) + random_amount (7)) + random_amount (14))
          - 2)) >= random_amount (27)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_30:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
      + initial[random_amount, (7)]) + initial[random_amount, (14)])
    + initial[random_amount, (21)])
   - ((((0 + initial[random_amount, (0)]) + initial[random_amount, (7)])
       + initial[random_amount, (14)]) - 2)) + initial[random_amount, (27)])
 <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
((random_amount (21) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) >= random_amount (21))
      and not ((random_amount (21) > 0))))
((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) > 0)
((((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) - 2)
  >= 0)
 and (((((balance (state_dao) + random_amount (0)) + random_amount (7))
        + random_amount (14)) + random_amount (21))
      >= ((((0 + random_amount (0)) + random_amount (7)) + random_amount (14))
          - 2)))
not ((random_user (27) = user))
(random_function (27) = deposit)
((random_amount (27) >= 0)
 and ((((((balance (user) - random_amount (0)) - random_amount (7))
         - random_amount (14)) - random_amount (21))
       + ((((0 + random_amount (0)) + random_amount (7)) + random_amount (14))
          - 2)) >= random_amount (27)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   + initial[random_amount, (21)])
  - ((((0 + initial[random_amount, (0)]) + initial[random_amount, (7)])
      + initial[random_amount, (14)]) - 2)) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
((random_amount (21) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) >= random_amount (21))
      and not ((random_amount (21) > 0))))
((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) > 0)
((((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) - 2)
  >= 0)
 and (((((balance (state_dao) + random_amount (0)) + random_amount (7))
        + random_amount (14)) + random_amount (21))
      >= ((((0 + random_amount (0)) + random_amount (7)) + random_amount (14))
          - 2)))
not ((random_user (27) = user))
(random_function (27) = deposit)
not (((random_amount (27) >= 0)
      and ((((((balance (user) - random_amount (0)) - random_amount (7))
              - random_amount (14)) - random_amount (21))
            + ((((0 + random_amount (0)) + random_amount (7))
                + random_amount (14)) - 2)) >= random_amount (27))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
      + initial[random_amount, (7)]) + initial[random_amount, (14)])
    + initial[random_amount, (21)])
   - ((((0 + initial[random_amount, (0)]) + initial[random_amount, (7)])
       + initial[random_amount, (14)]) - 2)) + initial[random_amount, (27)])
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
((random_amount (21) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) >= random_amount (21))
      and not ((random_amount (21) > 0))))
((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) > 0)
((((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) - 2)
  >= 0)
 and (((((balance (state_dao) + random_amount (0)) + random_amount (7))
        + random_amount (14)) + random_amount (21))
      >= ((((0 + random_amount (0)) + random_amount (7)) + random_amount (14))
          - 2)))
not ((random_user (27) = user))
not ((random_function (27) = deposit))
(random_function (27) = none)
((random_amount (27) >= 0)
 and ((((((balance (user) - random_amount (0)) - random_amount (7))
         - random_amount (14)) - random_amount (21))
       + ((((0 + random_amount (0)) + random_amount (7)) + random_amount (14))
          - 2)) >= random_amount (27)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_30:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
      + initial[random_amount, (7)]) + initial[random_amount, (14)])
    + initial[random_amount, (21)])
   - ((((0 + initial[random_amount, (0)]) + initial[random_amount, (7)])
       + initial[random_amount, (14)]) - 2)) + initial[random_amount, (27)])
 <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
((random_amount (21) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) >= random_amount (21))
      and not ((random_amount (21) > 0))))
((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) > 0)
((((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) - 2)
  >= 0)
 and (((((balance (state_dao) + random_amount (0)) + random_amount (7))
        + random_amount (14)) + random_amount (21))
      >= ((((0 + random_amount (0)) + random_amount (7)) + random_amount (14))
          - 2)))
not ((random_user (27) = user))
not ((random_function (27) = deposit))
(random_function (27) = none)
((random_amount (27) >= 0)
 and ((((((balance (user) - random_amount (0)) - random_amount (7))
         - random_amount (14)) - random_amount (21))
       + ((((0 + random_amount (0)) + random_amount (7)) + random_amount (14))
          - 2)) >= random_amount (27)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   + initial[random_amount, (21)])
  - ((((0 + initial[random_amount, (0)]) + initial[random_amount, (7)])
      + initial[random_amount, (14)]) - 2)) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
((random_amount (21) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) >= random_amount (21))
      and not ((random_amount (21) > 0))))
((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) > 0)
((((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) - 2)
  >= 0)
 and (((((balance (state_dao) + random_amount (0)) + random_amount (7))
        + random_amount (14)) + random_amount (21))
      >= ((((0 + random_amount (0)) + random_amount (7)) + random_amount (14))
          - 2)))
not ((random_user (27) = user))
not ((random_function (27) = deposit))
(random_function (27) = none)
not (((random_amount (27) >= 0)
      and ((((((balance (user) - random_amount (0)) - random_amount (7))
              - random_amount (14)) - random_amount (21))
            + ((((0 + random_amount (0)) + random_amount (7))
                + random_amount (14)) - 2)) >= random_amount (27))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
      + initial[random_amount, (7)]) + initial[random_amount, (14)])
    + initial[random_amount, (21)])
   - ((((0 + initial[random_amount, (0)]) + initial[random_amount, (7)])
       + initial[random_amount, (14)]) - 2)) + initial[random_amount, (27)])
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
((random_amount (21) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) >= random_amount (21))
      and not ((random_amount (21) > 0))))
((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) > 0)
((((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) - 2)
  >= 0)
 and (((((balance (state_dao) + random_amount (0)) + random_amount (7))
        + random_amount (14)) + random_amount (21))
      >= ((((0 + random_amount (0)) + random_amount (7)) + random_amount (14))
          - 2)))
not ((random_user (27) = user))
not ((random_function (27) = deposit))
not ((random_function (27) = none))
((random_amount (27) >= 0)
 and (((((((balance (user) - random_amount (0)) - random_amount (7))
          - random_amount (14)) - random_amount (21))
        + ((((0 + random_amount (0)) + random_amount (7)) + random_amount (14))
           - 2)) >= random_amount (27)) and not ((random_amount (27) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   + initial[random_amount, (21)])
  - ((((0 + initial[random_amount, (0)]) + initial[random_amount, (7)])
      + initial[random_amount, (14)]) - 2)) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
((random_amount (21) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) >= random_amount (21))
      and not ((random_amount (21) > 0))))
((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) > 0)
((((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) - 2)
  >= 0)
 and (((((balance (state_dao) + random_amount (0)) + random_amount (7))
        + random_amount (14)) + random_amount (21))
      >= ((((0 + random_amount (0)) + random_amount (7)) + random_amount (14))
          - 2)))
not ((random_user (27) = user))
not ((random_function (27) = deposit))
not ((random_function (27) = none))
not (((random_amount (27) >= 0)
      and (((((((balance (user) - random_amount (0)) - random_amount (7))
               - random_amount (14)) - random_amount (21))
             + ((((0 + random_amount (0)) + random_amount (7))
                 + random_amount (14)) - 2)) >= random_amount (27))
           and not ((random_amount (27) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  + initial[random_amount, (21)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
((random_amount (21) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) >= random_amount (21))
      and not ((random_amount (21) > 0))))
((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) > 0)
not (((((((0 + random_amount (0)) + random_amount (7)) + random_amount (14))
        - 2) >= 0)
      and (((((balance (state_dao) + random_amount (0)) + random_amount (7))
             + random_amount (14)) + random_amount (21))
           >= ((((0 + random_amount (0)) + random_amount (7))
                + random_amount (14)) - 2))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  + initial[random_amount, (21)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
((random_amount (21) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14)) >= random_amount (21))
      and not ((random_amount (21) > 0))))
not (((((0 + random_amount (0)) + random_amount (7)) + random_amount (14)) > 0))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_30:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (14)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
not (((random_amount (21) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             - random_amount (14)) >= random_amount (21))
           and not ((random_amount (21) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
((((balance (state_dao) + random_amount (0)) + random_amount (7))
  + random_amount (14)) <= 20)
not ((random_user (21) = user))
not ((random_function (21) = deposit))
not ((random_function (21) = none))
not (((random_amount (21) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             - random_amount (14)) >= random_amount (21))
           and not ((random_amount (21) > 0)))))
---------------

---------------
!!! invariant '_inv_3' violated in S_30:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
not (((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_30:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
not (((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14)) <= 20))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_30:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
(random_function (14) = deposit)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_30:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
((random_amount (14) >= 0)
 and (((balance (user) - random_amount (0)) - random_amount (7))
      >= random_amount (14)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_30:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
(random_function (14) = none)
not (((random_amount (14) >= 0)
      and (((balance (user) - random_amount (0)) - random_amount (7))
           >= random_amount (14))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
(random_user (20) = user)
---------------

---------------
!!! invariant '_inv_3' cannot be verified in S_30:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not (((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
          + initial[random_amount, (7)]) + initial[random_amount, (14)])
        - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)])
           - 2)) + initial[random_amount, (20)]) > 20))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
(random_function (20) = deposit)
((random_amount (20) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14))
       + (((0 + random_amount (0)) + random_amount (7)) - 2))
      >= random_amount (20)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
  + initial[random_amount, (20)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
(random_function (20) = deposit)
((random_amount (20) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14))
       + (((0 + random_amount (0)) + random_amount (7)) - 2))
      >= random_amount (20)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_30:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
  + initial[random_amount, (20)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
(random_function (20) = deposit)
((random_amount (20) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14))
       + (((0 + random_amount (0)) + random_amount (7)) - 2))
      >= random_amount (20)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
(random_function (20) = deposit)
not (((random_amount (20) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             - random_amount (14))
            + (((0 + random_amount (0)) + random_amount (7)) - 2))
           >= random_amount (20))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
  + initial[random_amount, (20)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
not ((random_function (20) = deposit))
(random_function (20) = none)
((random_amount (20) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14))
       + (((0 + random_amount (0)) + random_amount (7)) - 2))
      >= random_amount (20)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_30:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
  + initial[random_amount, (20)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
not ((random_function (20) = deposit))
(random_function (20) = none)
((random_amount (20) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        - random_amount (14))
       + (((0 + random_amount (0)) + random_amount (7)) - 2))
      >= random_amount (20)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
not ((random_function (20) = deposit))
(random_function (20) = none)
not (((random_amount (20) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             - random_amount (14))
            + (((0 + random_amount (0)) + random_amount (7)) - 2))
           >= random_amount (20))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
     + initial[random_amount, (7)]) + initial[random_amount, (14)])
   - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
  + initial[random_amount, (20)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
not ((random_function (20) = deposit))
not ((random_function (20) = none))
((random_amount (20) >= 0)
 and ((((((balance (user) - random_amount (0)) - random_amount (7))
         - random_amount (14))
        + (((0 + random_amount (0)) + random_amount (7)) - 2))
       >= random_amount (20)) and not ((random_amount (20) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) + initial[random_amount, (14)])
  - (((0 + initial[random_amount, (0)]) + initial[random_amount, (7)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
(((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
 and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
       + random_amount (14))
      >= (((0 + random_amount (0)) + random_amount (7)) - 2)))
not ((random_user (20) = user))
not ((random_function (20) = deposit))
not ((random_function (20) = none))
not (((random_amount (20) >= 0)
      and ((((((balance (user) - random_amount (0)) - random_amount (7))
              - random_amount (14))
             + (((0 + random_amount (0)) + random_amount (7)) - 2))
            >= random_amount (20)) and not ((random_amount (20) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
(((0 + random_amount (0)) + random_amount (7)) > 0)
not ((((((0 + random_amount (0)) + random_amount (7)) - 2) >= 0)
      and ((((balance (state_dao) + random_amount (0)) + random_amount (7))
            + random_amount (14))
           >= (((0 + random_amount (0)) + random_amount (7)) - 2))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) + initial[random_amount, (14)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
((random_amount (14) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       >= random_amount (14)) and not ((random_amount (14) > 0))))
not ((((0 + random_amount (0)) + random_amount (7)) > 0))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_30:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (7)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
not (((random_amount (14) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            >= random_amount (14)) and not ((random_amount (14) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
(((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20)
not ((random_user (14) = user))
not ((random_function (14) = deposit))
not ((random_function (14) = none))
not (((random_amount (14) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            >= random_amount (14)) and not ((random_amount (14) > 0)))))
---------------

---------------
!!! invariant '_inv_3' violated in S_30:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
not ((((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_30:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
not ((((balance (state_dao) + random_amount (0)) + random_amount (7)) <= 20))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_30:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
(random_function (7) = deposit)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_30:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
((random_amount (7) >= 0)
 and ((balance (user) - random_amount (0)) >= random_amount (7)))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_30:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
(random_function (7) = none)
not (((random_amount (7) >= 0)
      and ((balance (user) - random_amount (0)) >= random_amount (7))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
(random_user (13) = user)
---------------

---------------
!!! invariant '_inv_3' cannot be verified in S_30:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((((((initial[balance, (state_dao)] + initial[random_amount, (0)])
         + initial[random_amount, (7)])
        - ((0 + initial[random_amount, (0)]) - 2))
       + initial[random_amount, (13)]) > 20))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_30:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
(random_function (13) = deposit)
not (((random_amount (13) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            + ((0 + random_amount (0)) - 2)) >= random_amount (13))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
(random_function (13) = none)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_30:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
(random_function (13) = none)
((random_amount (13) >= 0)
 and ((((balance (user) - random_amount (0)) - random_amount (7))
       + ((0 + random_amount (0)) - 2)) >= random_amount (13)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
(random_function (13) = none)
not (((random_amount (13) >= 0)
      and ((((balance (user) - random_amount (0)) - random_amount (7))
            + ((0 + random_amount (0)) - 2)) >= random_amount (13))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((((initial[balance, (state_dao)] + initial[random_amount, (0)])
    + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
  + initial[random_amount, (13)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
not ((random_function (13) = none))
((random_amount (13) >= 0)
 and (((((balance (user) - random_amount (0)) - random_amount (7))
        + ((0 + random_amount (0)) - 2)) >= random_amount (13))
      and not ((random_amount (13) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((((initial[balance, (state_dao)] + initial[random_amount, (0)])
   + initial[random_amount, (7)]) - ((0 + initial[random_amount, (0)]) - 2))
 >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
((((0 + random_amount (0)) - 2) >= 0)
 and (((balance (state_dao) + random_amount (0)) + random_amount (7))
      >= ((0 + random_amount (0)) - 2)))
not ((random_user (13) = user))
not ((random_function (13) = deposit))
not ((random_function (13) = none))
not (((random_amount (13) >= 0)
      and (((((balance (user) - random_amount (0)) - random_amount (7))
             + ((0 + random_amount (0)) - 2)) >= random_amount (13))
           and not ((random_amount (13) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
((0 + random_amount (0)) > 0)
not (((((0 + random_amount (0)) - 2) >= 0)
      and (((balance (state_dao) + random_amount (0)) + random_amount (7))
           >= ((0 + random_amount (0)) - 2))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(((initial[balance, (state_dao)] + initial[random_amount, (0)])
  + initial[random_amount, (7)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
((random_amount (7) >= 0)
 and (((balance (user) - random_amount (0)) >= random_amount (7))
      and not ((random_amount (7) > 0))))
not (((0 + random_amount (0)) > 0))
---------------

---------------
!!! invariant '_inv_2' cannot be verified in S_30:
(((((executing_contract (1) = state_dao) and (executing_function (1) = deposit))
   and (amount (1) > 0)) and (state = INITIALSTATE))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
not ((initial[random_amount, (0)] > 0))

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
not (((random_amount (7) >= 0)
      and (((balance (user) - random_amount (0)) >= random_amount (7))
           and not ((random_amount (7) > 0)))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
((balance (state_dao) + random_amount (0)) <= 20)
not ((random_user (7) = user))
not ((random_function (7) = deposit))
not ((random_function (7) = none))
not (((random_amount (7) >= 0)
      and (((balance (user) - random_amount (0)) >= random_amount (7))
           and not ((random_amount (7) > 0)))))
---------------

---------------
!!! invariant '_inv_3' violated in S_30:
(((executing_contract (1) = state_dao)
  and ((executing_function (1) = deposit) and (balance (state_dao) > 20)))
 implies (exception = false))

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
not (((balance (state_dao) + random_amount (0)) <= 20))
---------------

---------------
!!! invariant '_inv_5' violated in S_30:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
false

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
not (((balance (state_dao) + random_amount (0)) <= 20))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_30:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
(random_function (0) = deposit)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_30:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
((random_amount (0) >= 0) and (balance (user) >= random_amount (0)))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_30:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
(random_function (0) = none)
not (((random_amount (0) >= 0) and (balance (user) >= random_amount (0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_30:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
((initial[balance, (state_dao)] + initial[random_amount, (0)]) <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
((random_amount (0) >= 0)
 and ((balance (user) >= random_amount (0)) and not ((random_amount (0) > 0))))
---------------

---------------
!!! invariant '_inv_4' cannot be verified in S_30:
(balance (state_dao) >= 3)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] >= 3)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

---------------
!!! invariant '_inv_5' cannot be verified in S_30:
(balance (state_dao) <= 20)

- in this state and path, it symbolically evaluates to:
(initial[balance, (state_dao)] <= 20)

- this path is taken when the following conditions hold in the initial state:
not ((random_user (0) = user))
not ((random_function (0) = deposit))
not ((random_function (0) = none))
not (((random_amount (0) >= 0)
      and ((balance (user) >= random_amount (0))
           and not ((random_amount (0) > 0)))))
---------------

--- S_30 summary:
'_inv_1': met on 59 paths / definitely violated on 0 paths / cannot be verified on 0 paths
'_inv_2': met on 43 paths / definitely violated on 0 paths / cannot be verified on 16 paths
'_inv_3': met on 52 paths / definitely violated on 4 paths / cannot be verified on 3 paths
'_inv_4': met on 4 paths / definitely violated on 0 paths / cannot be verified on 55 paths
'_inv_5': met on 38 paths / definitely violated on 4 paths / cannot be verified on 17 paths

=================================================

--- number of SMT solver calls: 190423

--- CPU time: 22,59s (usr: 22,36s, sys: 0,23s)
